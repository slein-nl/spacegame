
a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64
    2004:	48 83 ec 08          	sub    rsp,0x8
    2008:	48 8b 05 c1 5f 00 00 	mov    rax,QWORD PTR [rip+0x5fc1]        # 7fd0 <__gmon_start__@Base>
    200f:	48 85 c0             	test   rax,rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	call   rax
    2016:	48 83 c4 08          	add    rsp,0x8
    201a:	c3                   	ret

Disassembly of section .plt:

0000000000002020 <__errno_location@plt-0x10>:
    2020:	ff 35 ca 5f 00 00    	push   QWORD PTR [rip+0x5fca]        # 7ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	ff 25 cc 5f 00 00    	jmp    QWORD PTR [rip+0x5fcc]        # 7ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
    202c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000002030 <__errno_location@plt>:
    2030:	ff 25 ca 5f 00 00    	jmp    QWORD PTR [rip+0x5fca]        # 8000 <__errno_location@GLIBC_2.2.5>
    2036:	68 00 00 00 00       	push   0x0
    203b:	e9 e0 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002040 <std::allocator<char>::~allocator()@plt>:
    2040:	ff 25 c2 5f 00 00    	jmp    QWORD PTR [rip+0x5fc2]        # 8008 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    2046:	68 01 00 00 00       	push   0x1
    204b:	e9 d0 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002050 <nanosleep@plt>:
    2050:	ff 25 ba 5f 00 00    	jmp    QWORD PTR [rip+0x5fba]        # 8010 <nanosleep@GLIBC_2.2.5>
    2056:	68 02 00 00 00       	push   0x2
    205b:	e9 c0 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002060 <std::__throw_bad_alloc()@plt>:
    2060:	ff 25 b2 5f 00 00    	jmp    QWORD PTR [rip+0x5fb2]        # 8018 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    2066:	68 03 00 00 00       	push   0x3
    206b:	e9 b0 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002070 <strlen@plt>:
    2070:	ff 25 aa 5f 00 00    	jmp    QWORD PTR [rip+0x5faa]        # 8020 <strlen@GLIBC_2.2.5>
    2076:	68 04 00 00 00       	push   0x4
    207b:	e9 a0 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002080 <std::__throw_length_error(char const*)@plt>:
    2080:	ff 25 a2 5f 00 00    	jmp    QWORD PTR [rip+0x5fa2]        # 8028 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    2086:	68 05 00 00 00       	push   0x5
    208b:	e9 90 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002090 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    2090:	ff 25 9a 5f 00 00    	jmp    QWORD PTR [rip+0x5f9a]        # 8030 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    2096:	68 06 00 00 00       	push   0x6
    209b:	e9 80 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020a0 <__cxa_guard_release@plt>:
    20a0:	ff 25 92 5f 00 00    	jmp    QWORD PTR [rip+0x5f92]        # 8038 <__cxa_guard_release@CXXABI_1.3>
    20a6:	68 07 00 00 00       	push   0x7
    20ab:	e9 70 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    20b0:	ff 25 8a 5f 00 00    	jmp    QWORD PTR [rip+0x5f8a]        # 8040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    20b6:	68 08 00 00 00       	push   0x8
    20bb:	e9 60 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020c0 <std::__throw_logic_error(char const*)@plt>:
    20c0:	ff 25 82 5f 00 00    	jmp    QWORD PTR [rip+0x5f82]        # 8048 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    20c6:	68 09 00 00 00       	push   0x9
    20cb:	e9 50 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020d0 <std::__throw_bad_array_new_length()@plt>:
    20d0:	ff 25 7a 5f 00 00    	jmp    QWORD PTR [rip+0x5f7a]        # 8050 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
    20d6:	68 0a 00 00 00       	push   0xa
    20db:	e9 40 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    20e0:	ff 25 72 5f 00 00    	jmp    QWORD PTR [rip+0x5f72]        # 8058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    20e6:	68 0b 00 00 00       	push   0xb
    20eb:	e9 30 ff ff ff       	jmp    2020 <_init+0x20>

00000000000020f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    20f0:	ff 25 6a 5f 00 00    	jmp    QWORD PTR [rip+0x5f6a]        # 8060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    20f6:	68 0c 00 00 00       	push   0xc
    20fb:	e9 20 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002100 <system@plt>:
    2100:	ff 25 62 5f 00 00    	jmp    QWORD PTR [rip+0x5f62]        # 8068 <system@GLIBC_2.2.5>
    2106:	68 0d 00 00 00       	push   0xd
    210b:	e9 10 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002110 <__cxa_atexit@plt>:
    2110:	ff 25 5a 5f 00 00    	jmp    QWORD PTR [rip+0x5f5a]        # 8070 <__cxa_atexit@GLIBC_2.2.5>
    2116:	68 0e 00 00 00       	push   0xe
    211b:	e9 00 ff ff ff       	jmp    2020 <_init+0x20>

0000000000002120 <std::random_device::_M_fini()@plt>:
    2120:	ff 25 52 5f 00 00    	jmp    QWORD PTR [rip+0x5f52]        # 8078 <std::random_device::_M_fini()@GLIBCXX_3.4.18>
    2126:	68 0f 00 00 00       	push   0xf
    212b:	e9 f0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002130 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    2130:	ff 25 4a 5f 00 00    	jmp    QWORD PTR [rip+0x5f4a]        # 8080 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    2136:	68 10 00 00 00       	push   0x10
    213b:	e9 e0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002140 <operator new(unsigned long)@plt>:
    2140:	ff 25 42 5f 00 00    	jmp    QWORD PTR [rip+0x5f42]        # 8088 <operator new(unsigned long)@GLIBCXX_3.4>
    2146:	68 11 00 00 00       	push   0x11
    214b:	e9 d0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002150 <operator delete(void*, unsigned long)@plt>:
    2150:	ff 25 3a 5f 00 00    	jmp    QWORD PTR [rip+0x5f3a]        # 8090 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    2156:	68 12 00 00 00       	push   0x12
    215b:	e9 c0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>:
    2160:	ff 25 32 5f 00 00    	jmp    QWORD PTR [rip+0x5f32]        # 8098 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@GLIBCXX_3.4.21>
    2166:	68 13 00 00 00       	push   0x13
    216b:	e9 b0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002170 <std::allocator<char>::~allocator()@plt>:
    2170:	ff 25 2a 5f 00 00    	jmp    QWORD PTR [rip+0x5f2a]        # 80a0 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    2176:	68 14 00 00 00       	push   0x14
    217b:	e9 a0 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    2180:	ff 25 22 5f 00 00    	jmp    QWORD PTR [rip+0x5f22]        # 80a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    2186:	68 15 00 00 00       	push   0x15
    218b:	e9 90 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    2190:	ff 25 1a 5f 00 00    	jmp    QWORD PTR [rip+0x5f1a]        # 80b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    2196:	68 16 00 00 00       	push   0x16
    219b:	e9 80 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021a0 <__stack_chk_fail@plt>:
    21a0:	ff 25 12 5f 00 00    	jmp    QWORD PTR [rip+0x5f12]        # 80b8 <__stack_chk_fail@GLIBC_2.4>
    21a6:	68 17 00 00 00       	push   0x17
    21ab:	e9 70 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
    21b0:	ff 25 0a 5f 00 00    	jmp    QWORD PTR [rip+0x5f0a]        # 80c0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
    21b6:	68 18 00 00 00       	push   0x18
    21bb:	e9 60 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>:
    21c0:	ff 25 02 5f 00 00    	jmp    QWORD PTR [rip+0x5f02]        # 80c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@GLIBCXX_3.4.21>
    21c6:	68 19 00 00 00       	push   0x19
    21cb:	e9 50 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021d0 <std::random_device::_M_getval()@plt>:
    21d0:	ff 25 fa 5e 00 00    	jmp    QWORD PTR [rip+0x5efa]        # 80d0 <std::random_device::_M_getval()@GLIBCXX_3.4.18>
    21d6:	68 1a 00 00 00       	push   0x1a
    21db:	e9 40 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021e0 <getchar@plt>:
    21e0:	ff 25 f2 5e 00 00    	jmp    QWORD PTR [rip+0x5ef2]        # 80d8 <getchar@GLIBC_2.2.5>
    21e6:	68 1b 00 00 00       	push   0x1b
    21eb:	e9 30 fe ff ff       	jmp    2020 <_init+0x20>

00000000000021f0 <std::ios_base::Init::Init()@plt>:
    21f0:	ff 25 ea 5e 00 00    	jmp    QWORD PTR [rip+0x5eea]        # 80e0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    21f6:	68 1c 00 00 00       	push   0x1c
    21fb:	e9 20 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002200 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    2200:	ff 25 e2 5e 00 00    	jmp    QWORD PTR [rip+0x5ee2]        # 80e8 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    2206:	68 1d 00 00 00       	push   0x1d
    220b:	e9 10 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002210 <_Unwind_Resume@plt>:
    2210:	ff 25 da 5e 00 00    	jmp    QWORD PTR [rip+0x5eda]        # 80f0 <_Unwind_Resume@GCC_3.0>
    2216:	68 1e 00 00 00       	push   0x1e
    221b:	e9 00 fe ff ff       	jmp    2020 <_init+0x20>

0000000000002220 <std::allocator<char>::allocator()@plt>:
    2220:	ff 25 d2 5e 00 00    	jmp    QWORD PTR [rip+0x5ed2]        # 80f8 <std::allocator<char>::allocator()@GLIBCXX_3.4>
    2226:	68 1f 00 00 00       	push   0x1f
    222b:	e9 f0 fd ff ff       	jmp    2020 <_init+0x20>

0000000000002230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    2230:	ff 25 ca 5e 00 00    	jmp    QWORD PTR [rip+0x5eca]        # 8100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    2236:	68 20 00 00 00       	push   0x20
    223b:	e9 e0 fd ff ff       	jmp    2020 <_init+0x20>

0000000000002240 <__cxa_guard_acquire@plt>:
    2240:	ff 25 c2 5e 00 00    	jmp    QWORD PTR [rip+0x5ec2]        # 8108 <__cxa_guard_acquire@CXXABI_1.3>
    2246:	68 21 00 00 00       	push   0x21
    224b:	e9 d0 fd ff ff       	jmp    2020 <_init+0x20>

0000000000002250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    2250:	ff 25 ba 5e 00 00    	jmp    QWORD PTR [rip+0x5eba]        # 8110 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    2256:	68 22 00 00 00       	push   0x22
    225b:	e9 c0 fd ff ff       	jmp    2020 <_init+0x20>

Disassembly of section .text:

0000000000002260 <_start>:
    2260:	f3 0f 1e fa          	endbr64
    2264:	31 ed                	xor    ebp,ebp
    2266:	49 89 d1             	mov    r9,rdx
    2269:	5e                   	pop    rsi
    226a:	48 89 e2             	mov    rdx,rsp
    226d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    2271:	50                   	push   rax
    2272:	54                   	push   rsp
    2273:	45 31 c0             	xor    r8d,r8d
    2276:	31 c9                	xor    ecx,ecx
    2278:	48 8d 3d ba 05 00 00 	lea    rdi,[rip+0x5ba]        # 2839 <main>
    227f:	ff 15 3b 5d 00 00    	call   QWORD PTR [rip+0x5d3b]        # 7fc0 <__libc_start_main@GLIBC_2.34>
    2285:	f4                   	hlt
    2286:	66 2e 0f 1f 84 00 00 00 00 00 	cs nop WORD PTR [rax+rax*1+0x0]

0000000000002290 <deregister_tm_clones>:
    2290:	48 8d 3d 99 62 00 00 	lea    rdi,[rip+0x6299]        # 8530 <__TMC_END__>
    2297:	48 8d 05 92 62 00 00 	lea    rax,[rip+0x6292]        # 8530 <__TMC_END__>
    229e:	48 39 f8             	cmp    rax,rdi
    22a1:	74 15                	je     22b8 <deregister_tm_clones+0x28>
    22a3:	48 8b 05 1e 5d 00 00 	mov    rax,QWORD PTR [rip+0x5d1e]        # 7fc8 <_ITM_deregisterTMCloneTable@Base>
    22aa:	48 85 c0             	test   rax,rax
    22ad:	74 09                	je     22b8 <deregister_tm_clones+0x28>
    22af:	ff e0                	jmp    rax
    22b1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    22b8:	c3                   	ret
    22b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000022c0 <register_tm_clones>:
    22c0:	48 8d 3d 69 62 00 00 	lea    rdi,[rip+0x6269]        # 8530 <__TMC_END__>
    22c7:	48 8d 35 62 62 00 00 	lea    rsi,[rip+0x6262]        # 8530 <__TMC_END__>
    22ce:	48 29 fe             	sub    rsi,rdi
    22d1:	48 89 f0             	mov    rax,rsi
    22d4:	48 c1 ee 3f          	shr    rsi,0x3f
    22d8:	48 c1 f8 03          	sar    rax,0x3
    22dc:	48 01 c6             	add    rsi,rax
    22df:	48 d1 fe             	sar    rsi,1
    22e2:	74 14                	je     22f8 <register_tm_clones+0x38>
    22e4:	48 8b 05 ed 5c 00 00 	mov    rax,QWORD PTR [rip+0x5ced]        # 7fd8 <_ITM_registerTMCloneTable@Base>
    22eb:	48 85 c0             	test   rax,rax
    22ee:	74 08                	je     22f8 <register_tm_clones+0x38>
    22f0:	ff e0                	jmp    rax
    22f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    22f8:	c3                   	ret
    22f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000002300 <__do_global_dtors_aux>:
    2300:	f3 0f 1e fa          	endbr64
    2304:	80 3d 45 63 00 00 00 	cmp    BYTE PTR [rip+0x6345],0x0        # 8650 <completed.0>
    230b:	75 33                	jne    2340 <__do_global_dtors_aux+0x40>
    230d:	55                   	push   rbp
    230e:	48 83 3d a2 5c 00 00 00 	cmp    QWORD PTR [rip+0x5ca2],0x0        # 7fb8 <__cxa_finalize@GLIBC_2.2.5>
    2316:	48 89 e5             	mov    rbp,rsp
    2319:	74 0d                	je     2328 <__do_global_dtors_aux+0x28>
    231b:	48 8b 3d 06 5e 00 00 	mov    rdi,QWORD PTR [rip+0x5e06]        # 8128 <__dso_handle>
    2322:	ff 15 90 5c 00 00    	call   QWORD PTR [rip+0x5c90]        # 7fb8 <__cxa_finalize@GLIBC_2.2.5>
    2328:	e8 63 ff ff ff       	call   2290 <deregister_tm_clones>
    232d:	c6 05 1c 63 00 00 01 	mov    BYTE PTR [rip+0x631c],0x1        # 8650 <completed.0>
    2334:	5d                   	pop    rbp
    2335:	c3                   	ret
    2336:	66 2e 0f 1f 84 00 00 00 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    2340:	c3                   	ret
    2341:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    234c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000002350 <frame_dummy>:
    2350:	f3 0f 1e fa          	endbr64
    2354:	e9 67 ff ff ff       	jmp    22c0 <register_tm_clones>

0000000000002359 <printArena()>:
                      {'M', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M'},
                      {'M', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M'},
                      {'M', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M'},
                      {'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'}};

void printArena() {
    2359:	55                   	push   rbp
    235a:	48 89 e5             	mov    rbp,rsp
    235d:	48 83 ec 10          	sub    rsp,0x10
    system("clear");
    2361:	48 8d 05 ac 2c 00 00 	lea    rax,[rip+0x2cac]        # 5014 <__pstl::execution::v1::unseq+0x1>
    2368:	48 89 c7             	mov    rdi,rax
    236b:	e8 90 fd ff ff       	call   2100 <system@plt>
    for (int i = 0; i < 20; i++) {
    2370:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    2377:	e9 8d 00 00 00       	jmp    2409 <printArena()+0xb0>
    std::cout << "\r\n";
    237c:	48 8d 05 97 2c 00 00 	lea    rax,[rip+0x2c97]        # 501a <__pstl::execution::v1::unseq+0x7>
    2383:	48 89 c6             	mov    rsi,rax
    2386:	48 8d 05 b3 61 00 00 	lea    rax,[rip+0x61b3]        # 8540 <std::cout@GLIBCXX_3.4>
    238d:	48 89 c7             	mov    rdi,rax
    2390:	e8 9b fd ff ff       	call   2130 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
        for (int j = 0; j < 50; j++) {
    2395:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    239c:	eb 61                	jmp    23ff <printArena()+0xa6>
            std::cout << arena[i][j];
    239e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    23a1:	48 63 c8             	movsxd rcx,eax
    23a4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    23a7:	48 63 d0             	movsxd rdx,eax
    23aa:	48 89 d0             	mov    rax,rdx
    23ad:	48 c1 e0 02          	shl    rax,0x2
    23b1:	48 01 d0             	add    rax,rdx
    23b4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    23bc:	48 01 d0             	add    rax,rdx
    23bf:	48 01 c0             	add    rax,rax
    23c2:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
    23c6:	48 8d 05 73 5d 00 00 	lea    rax,[rip+0x5d73]        # 8140 <arena>
    23cd:	48 01 d0             	add    rax,rdx
    23d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    23d3:	0f be c0             	movsx  eax,al
    23d6:	89 c6                	mov    esi,eax
    23d8:	48 8d 05 61 61 00 00 	lea    rax,[rip+0x6161]        # 8540 <std::cout@GLIBCXX_3.4>
    23df:	48 89 c7             	mov    rdi,rax
    23e2:	e8 c9 fd ff ff       	call   21b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
            std::cout << ' ';
    23e7:	be 20 00 00 00       	mov    esi,0x20
    23ec:	48 8d 05 4d 61 00 00 	lea    rax,[rip+0x614d]        # 8540 <std::cout@GLIBCXX_3.4>
    23f3:	48 89 c7             	mov    rdi,rax
    23f6:	e8 b5 fd ff ff       	call   21b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
        for (int j = 0; j < 50; j++) {
    23fb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    23ff:	83 7d fc 31          	cmp    DWORD PTR [rbp-0x4],0x31
    2403:	7e 99                	jle    239e <printArena()+0x45>
    for (int i = 0; i < 20; i++) {
    2405:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    2409:	83 7d f8 13          	cmp    DWORD PTR [rbp-0x8],0x13
    240d:	0f 8e 69 ff ff ff    	jle    237c <printArena()+0x23>
        }
    }
    std::cout << "\r\n";
    2413:	48 8d 05 00 2c 00 00 	lea    rax,[rip+0x2c00]        # 501a <__pstl::execution::v1::unseq+0x7>
    241a:	48 89 c6             	mov    rsi,rax
    241d:	48 8d 05 1c 61 00 00 	lea    rax,[rip+0x611c]        # 8540 <std::cout@GLIBCXX_3.4>
    2424:	48 89 c7             	mov    rdi,rax
    2427:	e8 04 fd ff ff       	call   2130 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
}
    242c:	90                   	nop
    242d:	c9                   	leave
    242e:	c3                   	ret

000000000000242f <sleep(int)>:

void sleep(int t) {
    242f:	55                   	push   rbp
    2430:	48 89 e5             	mov    rbp,rsp
    2433:	48 83 ec 20          	sub    rsp,0x20
    2437:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    243a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2443:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2447:	31 c0                	xor    eax,eax
    std::this_thread::sleep_for(std::chrono::milliseconds(t));
    2449:	48 8d 55 ec          	lea    rdx,[rbp-0x14]
    244d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    2451:	48 89 d6             	mov    rsi,rdx
    2454:	48 89 c7             	mov    rdi,rax
    2457:	e8 fa 08 00 00       	call   2d56 <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&)>
    245c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    2460:	48 89 c7             	mov    rdi,rax
    2463:	e8 0d 09 00 00       	call   2d75 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
}
    2468:	90                   	nop
    2469:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    246d:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    2476:	74 05                	je     247d <sleep(int)+0x4e>
    2478:	e8 23 fd ff ff       	call   21a0 <__stack_chk_fail@plt>
    247d:	c9                   	leave
    247e:	c3                   	ret

000000000000247f <inputLoop()>:
        y = iy;
    }
};


void inputLoop() {
    247f:	55                   	push   rbp
    2480:	48 89 e5             	mov    rbp,rsp
    2483:	48 83 ec 10          	sub    rsp,0x10
    static Player p(15, 15);
    2487:	0f b6 05 e2 61 00 00 	movzx  eax,BYTE PTR [rip+0x61e2]        # 8670 <guard variable for inputLoop()::p>
    248e:	84 c0                	test   al,al
    2490:	0f 94 c0             	sete   al
    2493:	84 c0                	test   al,al
    2495:	74 40                	je     24d7 <inputLoop()+0x58>
    2497:	48 8d 05 d2 61 00 00 	lea    rax,[rip+0x61d2]        # 8670 <guard variable for inputLoop()::p>
    249e:	48 89 c7             	mov    rdi,rax
    24a1:	e8 9a fd ff ff       	call   2240 <__cxa_guard_acquire@plt>
    24a6:	85 c0                	test   eax,eax
    24a8:	0f 95 c0             	setne  al
    24ab:	84 c0                	test   al,al
    24ad:	74 28                	je     24d7 <inputLoop()+0x58>
    24af:	ba 0f 00 00 00       	mov    edx,0xf
    24b4:	be 0f 00 00 00       	mov    esi,0xf
    24b9:	48 8d 05 a8 61 00 00 	lea    rax,[rip+0x61a8]        # 8668 <inputLoop()::p>
    24c0:	48 89 c7             	mov    rdi,rax
    24c3:	e8 de 06 00 00       	call   2ba6 <Player::Player(int, int)>
    24c8:	48 8d 05 a1 61 00 00 	lea    rax,[rip+0x61a1]        # 8670 <guard variable for inputLoop()::p>
    24cf:	48 89 c7             	mov    rdi,rax
    24d2:	e8 c9 fb ff ff       	call   20a0 <__cxa_guard_release@plt>
    int c;
    while(true) {
        sleep(1);
    24d7:	bf 01 00 00 00       	mov    edi,0x1
    24dc:	e8 4e ff ff ff       	call   242f <sleep(int)>
        c = getchar();
    24e1:	e8 fa fc ff ff       	call   21e0 <getchar@plt>
    24e6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
        if (c == 'd' && p.x + 1 != 49) {
    24e9:	83 7d fc 64          	cmp    DWORD PTR [rbp-0x4],0x64
    24ed:	75 3d                	jne    252c <inputLoop()+0xad>
    24ef:	8b 05 73 61 00 00    	mov    eax,DWORD PTR [rip+0x6173]        # 8668 <inputLoop()::p>
    24f5:	83 f8 30             	cmp    eax,0x30
    24f8:	74 32                	je     252c <inputLoop()+0xad>
            p.derenderPlayer();
    24fa:	48 8d 05 67 61 00 00 	lea    rax,[rip+0x6167]        # 8668 <inputLoop()::p>
    2501:	48 89 c7             	mov    rdi,rax
    2504:	e8 55 06 00 00       	call   2b5e <Player::derenderPlayer()>
            p.x++;
    2509:	8b 05 59 61 00 00    	mov    eax,DWORD PTR [rip+0x6159]        # 8668 <inputLoop()::p>
    250f:	83 c0 01             	add    eax,0x1
    2512:	89 05 50 61 00 00    	mov    DWORD PTR [rip+0x6150],eax        # 8668 <inputLoop()::p>
            p.renderPlayer();
    2518:	48 8d 05 49 61 00 00 	lea    rax,[rip+0x6149]        # 8668 <inputLoop()::p>
    251f:	48 89 c7             	mov    rdi,rax
    2522:	e8 ef 05 00 00       	call   2b16 <Player::renderPlayer()>
            printArena();
    2527:	e8 2d fe ff ff       	call   2359 <printArena()>
        }
        if (c == 's' && p.y + 1 != 19) {
    252c:	83 7d fc 73          	cmp    DWORD PTR [rbp-0x4],0x73
    2530:	75 3d                	jne    256f <inputLoop()+0xf0>
    2532:	8b 05 34 61 00 00    	mov    eax,DWORD PTR [rip+0x6134]        # 866c <inputLoop()::p+0x4>
    2538:	83 f8 12             	cmp    eax,0x12
    253b:	74 32                	je     256f <inputLoop()+0xf0>
            p.derenderPlayer();
    253d:	48 8d 05 24 61 00 00 	lea    rax,[rip+0x6124]        # 8668 <inputLoop()::p>
    2544:	48 89 c7             	mov    rdi,rax
    2547:	e8 12 06 00 00       	call   2b5e <Player::derenderPlayer()>
            p.y++;
    254c:	8b 05 1a 61 00 00    	mov    eax,DWORD PTR [rip+0x611a]        # 866c <inputLoop()::p+0x4>
    2552:	83 c0 01             	add    eax,0x1
    2555:	89 05 11 61 00 00    	mov    DWORD PTR [rip+0x6111],eax        # 866c <inputLoop()::p+0x4>
            p.renderPlayer();
    255b:	48 8d 05 06 61 00 00 	lea    rax,[rip+0x6106]        # 8668 <inputLoop()::p>
    2562:	48 89 c7             	mov    rdi,rax
    2565:	e8 ac 05 00 00       	call   2b16 <Player::renderPlayer()>
            printArena();
    256a:	e8 ea fd ff ff       	call   2359 <printArena()>
        }
        if (c == 'a' && p.x - 1 != 0) {
    256f:	83 7d fc 61          	cmp    DWORD PTR [rbp-0x4],0x61
    2573:	75 3d                	jne    25b2 <inputLoop()+0x133>
    2575:	8b 05 ed 60 00 00    	mov    eax,DWORD PTR [rip+0x60ed]        # 8668 <inputLoop()::p>
    257b:	83 f8 01             	cmp    eax,0x1
    257e:	74 32                	je     25b2 <inputLoop()+0x133>
            p.derenderPlayer();
    2580:	48 8d 05 e1 60 00 00 	lea    rax,[rip+0x60e1]        # 8668 <inputLoop()::p>
    2587:	48 89 c7             	mov    rdi,rax
    258a:	e8 cf 05 00 00       	call   2b5e <Player::derenderPlayer()>
            p.x--;
    258f:	8b 05 d3 60 00 00    	mov    eax,DWORD PTR [rip+0x60d3]        # 8668 <inputLoop()::p>
    2595:	83 e8 01             	sub    eax,0x1
    2598:	89 05 ca 60 00 00    	mov    DWORD PTR [rip+0x60ca],eax        # 8668 <inputLoop()::p>
            p.renderPlayer();
    259e:	48 8d 05 c3 60 00 00 	lea    rax,[rip+0x60c3]        # 8668 <inputLoop()::p>
    25a5:	48 89 c7             	mov    rdi,rax
    25a8:	e8 69 05 00 00       	call   2b16 <Player::renderPlayer()>
            printArena();
    25ad:	e8 a7 fd ff ff       	call   2359 <printArena()>
        }
        if (c == 'w' && p.y - 1 != 0 ) {
    25b2:	83 7d fc 77          	cmp    DWORD PTR [rbp-0x4],0x77
    25b6:	75 3d                	jne    25f5 <inputLoop()+0x176>
    25b8:	8b 05 ae 60 00 00    	mov    eax,DWORD PTR [rip+0x60ae]        # 866c <inputLoop()::p+0x4>
    25be:	83 f8 01             	cmp    eax,0x1
    25c1:	74 32                	je     25f5 <inputLoop()+0x176>
            p.derenderPlayer();
    25c3:	48 8d 05 9e 60 00 00 	lea    rax,[rip+0x609e]        # 8668 <inputLoop()::p>
    25ca:	48 89 c7             	mov    rdi,rax
    25cd:	e8 8c 05 00 00       	call   2b5e <Player::derenderPlayer()>
            p.y--;
    25d2:	8b 05 94 60 00 00    	mov    eax,DWORD PTR [rip+0x6094]        # 866c <inputLoop()::p+0x4>
    25d8:	83 e8 01             	sub    eax,0x1
    25db:	89 05 8b 60 00 00    	mov    DWORD PTR [rip+0x608b],eax        # 866c <inputLoop()::p+0x4>
            p.renderPlayer();
    25e1:	48 8d 05 80 60 00 00 	lea    rax,[rip+0x6080]        # 8668 <inputLoop()::p>
    25e8:	48 89 c7             	mov    rdi,rax
    25eb:	e8 26 05 00 00       	call   2b16 <Player::renderPlayer()>
            printArena();
    25f0:	e8 64 fd ff ff       	call   2359 <printArena()>
        }
        if (c == 'b') {
    25f5:	83 7d fc 62          	cmp    DWORD PTR [rbp-0x4],0x62
    25f9:	74 05                	je     2600 <inputLoop()+0x181>
        sleep(1);
    25fb:	e9 d7 fe ff ff       	jmp    24d7 <inputLoop()+0x58>
           break;
    2600:	90                   	nop
        }

    }

}
    2601:	90                   	nop
    2602:	c9                   	leave
    2603:	c3                   	ret

0000000000002604 <gameLoop()>:




void gameLoop() {
    2604:	55                   	push   rbp
    2605:	48 89 e5             	mov    rbp,rsp
    2608:	53                   	push   rbx
    2609:	48 81 ec 58 27 00 00 	sub    rsp,0x2758
    2610:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2619:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    261d:	31 c0                	xor    eax,eax
    static std::vector<Enemy> enemyVec; 
    261f:	0f b6 05 72 60 00 00 	movzx  eax,BYTE PTR [rip+0x6072]        # 8698 <guard variable for gameLoop()::enemyVec>
    2626:	84 c0                	test   al,al
    2628:	0f 94 c0             	sete   al
    262b:	84 c0                	test   al,al
    262d:	74 59                	je     2688 <gameLoop()+0x84>
    262f:	48 8d 05 62 60 00 00 	lea    rax,[rip+0x6062]        # 8698 <guard variable for gameLoop()::enemyVec>
    2636:	48 89 c7             	mov    rdi,rax
    2639:	e8 02 fc ff ff       	call   2240 <__cxa_guard_acquire@plt>
    263e:	85 c0                	test   eax,eax
    2640:	0f 95 c0             	setne  al
    2643:	84 c0                	test   al,al
    2645:	74 41                	je     2688 <gameLoop()+0x84>
    2647:	48 8d 05 32 60 00 00 	lea    rax,[rip+0x6032]        # 8680 <gameLoop()::enemyVec>
    264e:	48 89 c7             	mov    rdi,rax
    2651:	e8 ac 05 00 00       	call   2c02 <std::vector<Enemy, std::allocator<Enemy> >::vector()>
    2656:	48 8d 05 cb 5a 00 00 	lea    rax,[rip+0x5acb]        # 8128 <__dso_handle>
    265d:	48 89 c2             	mov    rdx,rax
    2660:	48 8d 05 19 60 00 00 	lea    rax,[rip+0x6019]        # 8680 <gameLoop()::enemyVec>
    2667:	48 89 c6             	mov    rsi,rax
    266a:	48 8d 05 7b 08 00 00 	lea    rax,[rip+0x87b]        # 2eec <std::vector<Enemy, std::allocator<Enemy> >::~vector()>
    2671:	48 89 c7             	mov    rdi,rax
    2674:	e8 97 fa ff ff       	call   2110 <__cxa_atexit@plt>
    2679:	48 8d 05 18 60 00 00 	lea    rax,[rip+0x6018]        # 8698 <guard variable for gameLoop()::enemyVec>
    2680:	48 89 c7             	mov    rdi,rax
    2683:	e8 18 fa ff ff       	call   20a0 <__cxa_guard_release@plt>
    int enemyTimer = 5;
    2688:	c7 85 a4 d8 ff ff 05 00 00 00 	mov    DWORD PTR [rbp-0x275c],0x5
    // arcane random generator shit
    std::random_device rd;
    2692:	48 8d 85 d0 d8 ff ff 	lea    rax,[rbp-0x2730]
    2699:	48 89 c7             	mov    rdi,rax
    269c:	e8 d5 02 00 00       	call   2976 <std::random_device::random_device()>
    std::mt19937 gen(rd());
    26a1:	48 8d 85 d0 d8 ff ff 	lea    rax,[rbp-0x2730]
    26a8:	48 89 c7             	mov    rdi,rax
    26ab:	e8 98 03 00 00       	call   2a48 <std::random_device::operator()()>
    26b0:	89 c2                	mov    edx,eax
    26b2:	48 8d 85 60 ec ff ff 	lea    rax,[rbp-0x13a0]
    26b9:	48 89 d6             	mov    rsi,rdx
    26bc:	48 89 c7             	mov    rdi,rax
    26bf:	e8 6c 08 00 00       	call   2f30 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>
    std::uniform_int_distribution<int> distr(0, 19);
    26c4:	48 8d 85 c0 d8 ff ff 	lea    rax,[rbp-0x2740]
    26cb:	ba 13 00 00 00       	mov    edx,0x13
    26d0:	be 00 00 00 00       	mov    esi,0x0
    26d5:	48 89 c7             	mov    rdi,rax
    26d8:	e8 79 08 00 00       	call   2f56 <std::uniform_int_distribution<int>::uniform_int_distribution(int, int)>

    while(true) {

        sleep(1000);
    26dd:	bf e8 03 00 00       	mov    edi,0x3e8
    26e2:	e8 48 fd ff ff       	call   242f <sleep(int)>

        for (Enemy e : enemyVec) {
    26e7:	48 8d 05 92 5f 00 00 	lea    rax,[rip+0x5f92]        # 8680 <gameLoop()::enemyVec>
    26ee:	48 89 85 b8 d8 ff ff 	mov    QWORD PTR [rbp-0x2748],rax
    26f5:	48 8b 85 b8 d8 ff ff 	mov    rax,QWORD PTR [rbp-0x2748]
    26fc:	48 89 c7             	mov    rdi,rax
    26ff:	e8 7c 08 00 00       	call   2f80 <std::vector<Enemy, std::allocator<Enemy> >::begin()>
    2704:	48 89 85 a8 d8 ff ff 	mov    QWORD PTR [rbp-0x2758],rax
    270b:	48 8b 85 b8 d8 ff ff 	mov    rax,QWORD PTR [rbp-0x2748]
    2712:	48 89 c7             	mov    rdi,rax
    2715:	e8 ae 08 00 00       	call   2fc8 <std::vector<Enemy, std::allocator<Enemy> >::end()>
    271a:	48 89 85 b0 d8 ff ff 	mov    QWORD PTR [rbp-0x2750],rax
    2721:	eb 55                	jmp    2778 <gameLoop()+0x174>
    2723:	48 8d 85 a8 d8 ff ff 	lea    rax,[rbp-0x2758]
    272a:	48 89 c7             	mov    rdi,rax
    272d:	e8 3e 09 00 00       	call   3070 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator*() const>
    2732:	48 8b 00             	mov    rax,QWORD PTR [rax]
    2735:	48 89 85 c8 d8 ff ff 	mov    QWORD PTR [rbp-0x2738],rax
            e.derenderEnemy();
    273c:	48 8d 85 c8 d8 ff ff 	lea    rax,[rbp-0x2738]
    2743:	48 89 c7             	mov    rdi,rax
    2746:	e8 5f 03 00 00       	call   2aaa <Enemy::derenderEnemy()>
            e.x--;
    274b:	8b 85 c8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2738]
    2751:	83 e8 01             	sub    eax,0x1
    2754:	89 85 c8 d8 ff ff    	mov    DWORD PTR [rbp-0x2738],eax
            e.renderEnemy();
    275a:	48 8d 85 c8 d8 ff ff 	lea    rax,[rbp-0x2738]
    2761:	48 89 c7             	mov    rdi,rax
    2764:	e8 f9 02 00 00       	call   2a62 <Enemy::renderEnemy()>
        for (Enemy e : enemyVec) {
    2769:	48 8d 85 a8 d8 ff ff 	lea    rax,[rbp-0x2758]
    2770:	48 89 c7             	mov    rdi,rax
    2773:	e8 d8 08 00 00       	call   3050 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator++()>
    2778:	48 8d 95 b0 d8 ff ff 	lea    rdx,[rbp-0x2750]
    277f:	48 8d 85 a8 d8 ff ff 	lea    rax,[rbp-0x2758]
    2786:	48 89 d6             	mov    rsi,rdx
    2789:	48 89 c7             	mov    rdi,rax
    278c:	e8 83 08 00 00       	call   3014 <bool __gnu_cxx::operator!=<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&, __gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&)>
    2791:	84 c0                	test   al,al
    2793:	75 8e                	jne    2723 <gameLoop()+0x11f>
        }
        
        if (enemyTimer == 5) {
    2795:	83 bd a4 d8 ff ff 05 	cmp    DWORD PTR [rbp-0x275c],0x5
    279c:	75 6d                	jne    280b <gameLoop()+0x207>
            Enemy e(distr(gen), 48);
    279e:	48 8d 95 60 ec ff ff 	lea    rdx,[rbp-0x13a0]
    27a5:	48 8d 85 c0 d8 ff ff 	lea    rax,[rbp-0x2740]
    27ac:	48 89 d6             	mov    rsi,rdx
    27af:	48 89 c7             	mov    rdi,rax
    27b2:	e8 cb 08 00 00       	call   3082 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&)>
    27b7:	89 c1                	mov    ecx,eax
    27b9:	48 8d 85 c8 d8 ff ff 	lea    rax,[rbp-0x2738]
    27c0:	ba 30 00 00 00       	mov    edx,0x30
    27c5:	89 ce                	mov    esi,ecx
    27c7:	48 89 c7             	mov    rdi,rax
    27ca:	e8 23 03 00 00       	call   2af2 <Enemy::Enemy(int, int)>
            enemyVec.push_back(e);
    27cf:	48 8d 85 c8 d8 ff ff 	lea    rax,[rbp-0x2738]
    27d6:	48 89 c6             	mov    rsi,rax
    27d9:	48 8d 05 a0 5e 00 00 	lea    rax,[rip+0x5ea0]        # 8680 <gameLoop()::enemyVec>
    27e0:	48 89 c7             	mov    rdi,rax
    27e3:	e8 c4 08 00 00       	call   30ac <std::vector<Enemy, std::allocator<Enemy> >::push_back(Enemy const&)>
            enemyVec.back().renderEnemy();
    27e8:	48 8d 05 91 5e 00 00 	lea    rax,[rip+0x5e91]        # 8680 <gameLoop()::enemyVec>
    27ef:	48 89 c7             	mov    rdi,rax
    27f2:	e8 31 09 00 00       	call   3128 <std::vector<Enemy, std::allocator<Enemy> >::back()>
    27f7:	48 89 c7             	mov    rdi,rax
    27fa:	e8 63 02 00 00       	call   2a62 <Enemy::renderEnemy()>
            enemyTimer = 0;
    27ff:	c7 85 a4 d8 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x275c],0x0
    2809:	eb 07                	jmp    2812 <gameLoop()+0x20e>
        }
        else enemyTimer++;
    280b:	83 85 a4 d8 ff ff 01 	add    DWORD PTR [rbp-0x275c],0x1

        printArena();
    2812:	e8 42 fb ff ff       	call   2359 <printArena()>
    }
    2817:	e9 c1 fe ff ff       	jmp    26dd <gameLoop()+0xd9>
}
    281c:	48 89 c3             	mov    rbx,rax
    281f:	48 8d 85 d0 d8 ff ff 	lea    rax,[rbp-0x2730]
    2826:	48 89 c7             	mov    rdi,rax
    2829:	e8 fe 01 00 00       	call   2a2c <std::random_device::~random_device()>
    282e:	48 89 d8             	mov    rax,rbx
    2831:	48 89 c7             	mov    rdi,rax
    2834:	e8 d7 f9 ff ff       	call   2210 <_Unwind_Resume@plt>

0000000000002839 <main>:

int main() {
    2839:	55                   	push   rbp
    283a:	48 89 e5             	mov    rbp,rsp
    system("stty raw");
    283d:	48 8d 05 d9 27 00 00 	lea    rax,[rip+0x27d9]        # 501d <__pstl::execution::v1::unseq+0xa>
    2844:	48 89 c7             	mov    rdi,rax
    2847:	e8 b4 f8 ff ff       	call   2100 <system@plt>
    gameLoop();
    284c:	e8 b3 fd ff ff       	call   2604 <gameLoop()>
    //inputLoop();
    system("stty cooked"); 
    2851:	48 8d 05 ce 27 00 00 	lea    rax,[rip+0x27ce]        # 5026 <__pstl::execution::v1::unseq+0x13>
    2858:	48 89 c7             	mov    rdi,rax
    285b:	e8 a0 f8 ff ff       	call   2100 <system@plt>
    return 0;
    2860:	b8 00 00 00 00       	mov    eax,0x0
}
    2865:	5d                   	pop    rbp
    2866:	c3                   	ret

0000000000002867 <__static_initialization_and_destruction_0(int, int)>:
    2867:	55                   	push   rbp
    2868:	48 89 e5             	mov    rbp,rsp
    286b:	48 83 ec 10          	sub    rsp,0x10
    286f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    2872:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    2875:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
    2879:	75 3b                	jne    28b6 <__static_initialization_and_destruction_0(int, int)+0x4f>
    287b:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
    2882:	75 32                	jne    28b6 <__static_initialization_and_destruction_0(int, int)+0x4f>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    2884:	48 8d 05 d5 5d 00 00 	lea    rax,[rip+0x5dd5]        # 8660 <std::__ioinit>
    288b:	48 89 c7             	mov    rdi,rax
    288e:	e8 5d f9 ff ff       	call   21f0 <std::ios_base::Init::Init()@plt>
    2893:	48 8d 05 8e 58 00 00 	lea    rax,[rip+0x588e]        # 8128 <__dso_handle>
    289a:	48 89 c2             	mov    rdx,rax
    289d:	48 8d 05 bc 5d 00 00 	lea    rax,[rip+0x5dbc]        # 8660 <std::__ioinit>
    28a4:	48 89 c6             	mov    rsi,rax
    28a7:	48 8b 05 32 57 00 00 	mov    rax,QWORD PTR [rip+0x5732]        # 7fe0 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    28ae:	48 89 c7             	mov    rdi,rax
    28b1:	e8 5a f8 ff ff       	call   2110 <__cxa_atexit@plt>
    28b6:	90                   	nop
    28b7:	c9                   	leave
    28b8:	c3                   	ret

00000000000028b9 <_GLOBAL__sub_I_arena>:
    28b9:	55                   	push   rbp
    28ba:	48 89 e5             	mov    rbp,rsp
    28bd:	be ff ff 00 00       	mov    esi,0xffff
    28c2:	bf 01 00 00 00       	mov    edi,0x1
    28c7:	e8 9b ff ff ff       	call   2867 <__static_initialization_and_destruction_0(int, int)>
    28cc:	5d                   	pop    rbp
    28cd:	c3                   	ret

00000000000028ce <std::__is_constant_evaluated()>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
    28ce:	55                   	push   rbp
    28cf:	48 89 e5             	mov    rbp,rsp
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
    28d2:	b8 00 00 00 00       	mov    eax,0x0
#else
    return false;
#endif
  }
    28d7:	5d                   	pop    rbp
    28d8:	c3                   	ret

00000000000028d9 <operator new(unsigned long, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    28d9:	55                   	push   rbp
    28da:	48 89 e5             	mov    rbp,rsp
    28dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    28e1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    28e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    28e9:	5d                   	pop    rbp
    28ea:	c3                   	ret

00000000000028eb <std::char_traits<char>::length(char const*)>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
    28eb:	55                   	push   rbp
    28ec:	48 89 e5             	mov    rbp,rsp
    28ef:	48 83 ec 10          	sub    rsp,0x10
    28f3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
    28f7:	e8 d2 ff ff ff       	call   28ce <std::__is_constant_evaluated()>
    28fc:	84 c0                	test   al,al
    28fe:	74 0e                	je     290e <std::char_traits<char>::length(char const*)+0x23>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
    2900:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2904:	48 89 c7             	mov    rdi,rax
    2907:	e8 12 03 00 00       	call   2c1e <__gnu_cxx::char_traits<char>::length(char const*)>
    290c:	eb 0d                	jmp    291b <std::char_traits<char>::length(char const*)+0x30>
#endif
	return __builtin_strlen(__s);
    290e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2912:	48 89 c7             	mov    rdi,rax
    2915:	e8 56 f7 ff ff       	call   2070 <strlen@plt>
    291a:	90                   	nop
      }
    291b:	c9                   	leave
    291c:	c3                   	ret
    291d:	90                   	nop

000000000000291e <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>:
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3050. Conversion specification problem in chrono::duration
	template<typename _Rep2, typename = _Require<
		 is_convertible<const _Rep2&, rep>,
		 __or_<__is_float<rep>, __not_<__is_float<_Rep2>>>>>
	  constexpr explicit duration(const _Rep2& __rep)
    291e:	55                   	push   rbp
    291f:	48 89 e5             	mov    rbp,rsp
    2922:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2926:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  : __r(static_cast<rep>(__rep)) { }
    292a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    292e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    2931:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2935:	48 89 10             	mov    QWORD PTR [rax],rdx
    2938:	90                   	nop
    2939:	5d                   	pop    rbp
    293a:	c3                   	ret

000000000000293b <std::chrono::duration_values<long>::zero()>:
	zero() noexcept
    293b:	55                   	push   rbp
    293c:	48 89 e5             	mov    rbp,rsp
	{ return _Rep(0); }
    293f:	b8 00 00 00 00       	mov    eax,0x0
    2944:	5d                   	pop    rbp
    2945:	c3                   	ret

0000000000002946 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
    2946:	55                   	push   rbp
    2947:	48 89 e5             	mov    rbp,rsp
    294a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	{ return __r; }
    294e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2952:	48 8b 00             	mov    rax,QWORD PTR [rax]
    2955:	5d                   	pop    rbp
    2956:	c3                   	ret
    2957:	90                   	nop

0000000000002958 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    2958:	55                   	push   rbp
    2959:	48 89 e5             	mov    rbp,rsp
    295c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2960:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  : __r(static_cast<rep>(__rep)) { }
    2964:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2968:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    296b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    296f:	48 89 10             	mov    QWORD PTR [rax],rdx
    2972:	90                   	nop
    2973:	5d                   	pop    rbp
    2974:	c3                   	ret
    2975:	90                   	nop

0000000000002976 <std::random_device::random_device()>:
    /** The type of the generated random value. */
    typedef unsigned int result_type;

    // constructors, destructors and member functions

    random_device() { _M_init("default"); }
    2976:	55                   	push   rbp
    2977:	48 89 e5             	mov    rbp,rsp
    297a:	53                   	push   rbx
    297b:	48 83 ec 58          	sub    rsp,0x58
    297f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
    2983:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    298c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    2990:	31 c0                	xor    eax,eax
    2992:	48 8d 45 bf          	lea    rax,[rbp-0x41]
    2996:	48 89 c7             	mov    rdi,rax
    2999:	e8 82 f8 ff ff       	call   2220 <std::allocator<char>::allocator()@plt>
    299e:	48 8d 55 bf          	lea    rdx,[rbp-0x41]
    29a2:	48 8d 45 c0          	lea    rax,[rbp-0x40]
    29a6:	48 8d 0d 5b 26 00 00 	lea    rcx,[rip+0x265b]        # 5008 <_IO_stdin_used+0x8>
    29ad:	48 89 ce             	mov    rsi,rcx
    29b0:	48 89 c7             	mov    rdi,rax
    29b3:	e8 fe 02 00 00       	call   2cb6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
    29b8:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
    29bc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    29c0:	48 89 d6             	mov    rsi,rdx
    29c3:	48 89 c7             	mov    rdi,rax
    29c6:	e8 35 f8 ff ff       	call   2200 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    29cb:	48 8d 45 c0          	lea    rax,[rbp-0x40]
    29cf:	48 89 c7             	mov    rdi,rax
    29d2:	e8 b9 f6 ff ff       	call   2090 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    29d7:	48 8d 45 bf          	lea    rax,[rbp-0x41]
    29db:	48 89 c7             	mov    rdi,rax
    29de:	e8 8d f7 ff ff       	call   2170 <std::allocator<char>::~allocator()@plt>
    29e3:	90                   	nop
    29e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    29e8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    29f1:	74 32                	je     2a25 <std::random_device::random_device()+0xaf>
    29f3:	eb 2b                	jmp    2a20 <std::random_device::random_device()+0xaa>
    29f5:	48 89 c3             	mov    rbx,rax
    29f8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
    29fc:	48 89 c7             	mov    rdi,rax
    29ff:	e8 8c f6 ff ff       	call   2090 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    2a04:	eb 03                	jmp    2a09 <std::random_device::random_device()+0x93>
    2a06:	48 89 c3             	mov    rbx,rax
    2a09:	48 8d 45 bf          	lea    rax,[rbp-0x41]
    2a0d:	48 89 c7             	mov    rdi,rax
    2a10:	e8 5b f7 ff ff       	call   2170 <std::allocator<char>::~allocator()@plt>
    2a15:	48 89 d8             	mov    rax,rbx
    2a18:	48 89 c7             	mov    rdi,rax
    2a1b:	e8 f0 f7 ff ff       	call   2210 <_Unwind_Resume@plt>
    2a20:	e8 7b f7 ff ff       	call   21a0 <__stack_chk_fail@plt>
    2a25:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    2a29:	c9                   	leave
    2a2a:	c3                   	ret
    2a2b:	90                   	nop

0000000000002a2c <std::random_device::~random_device()>:

    explicit
    random_device(const std::string& __token) { _M_init(__token); }

#if defined _GLIBCXX_USE_DEV_RANDOM
    ~random_device()
    2a2c:	55                   	push   rbp
    2a2d:	48 89 e5             	mov    rbp,rsp
    2a30:	48 83 ec 10          	sub    rsp,0x10
    2a34:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { _M_fini(); }
    2a38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2a3c:	48 89 c7             	mov    rdi,rax
    2a3f:	e8 dc f6 ff ff       	call   2120 <std::random_device::_M_fini()@plt>
    2a44:	90                   	nop
    2a45:	c9                   	leave
    2a46:	c3                   	ret
    2a47:	90                   	nop

0000000000002a48 <std::random_device::operator()()>:
      return 0.0;
#endif
    }

    result_type
    operator()()
    2a48:	55                   	push   rbp
    2a49:	48 89 e5             	mov    rbp,rsp
    2a4c:	48 83 ec 10          	sub    rsp,0x10
    2a50:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return this->_M_getval(); }
    2a54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2a58:	48 89 c7             	mov    rdi,rax
    2a5b:	e8 70 f7 ff ff       	call   21d0 <std::random_device::_M_getval()@plt>
    2a60:	c9                   	leave
    2a61:	c3                   	ret

0000000000002a62 <Enemy::renderEnemy()>:
    void renderEnemy() {
    2a62:	55                   	push   rbp
    2a63:	48 89 e5             	mov    rbp,rsp
    2a66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        arena[y][x] = 'X';
    2a6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2a6e:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    2a71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2a75:	8b 00                	mov    eax,DWORD PTR [rax]
    2a77:	48 63 c8             	movsxd rcx,eax
    2a7a:	48 63 d2             	movsxd rdx,edx
    2a7d:	48 89 d0             	mov    rax,rdx
    2a80:	48 c1 e0 02          	shl    rax,0x2
    2a84:	48 01 d0             	add    rax,rdx
    2a87:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    2a8f:	48 01 d0             	add    rax,rdx
    2a92:	48 01 c0             	add    rax,rax
    2a95:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
    2a99:	48 8d 05 a0 56 00 00 	lea    rax,[rip+0x56a0]        # 8140 <arena>
    2aa0:	48 01 d0             	add    rax,rdx
    2aa3:	c6 00 58             	mov    BYTE PTR [rax],0x58
    }
    2aa6:	90                   	nop
    2aa7:	5d                   	pop    rbp
    2aa8:	c3                   	ret
    2aa9:	90                   	nop

0000000000002aaa <Enemy::derenderEnemy()>:
    void derenderEnemy() {
    2aaa:	55                   	push   rbp
    2aab:	48 89 e5             	mov    rbp,rsp
    2aae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        arena[y][x] = ' ';
    2ab2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2ab6:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    2ab9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2abd:	8b 00                	mov    eax,DWORD PTR [rax]
    2abf:	48 63 c8             	movsxd rcx,eax
    2ac2:	48 63 d2             	movsxd rdx,edx
    2ac5:	48 89 d0             	mov    rax,rdx
    2ac8:	48 c1 e0 02          	shl    rax,0x2
    2acc:	48 01 d0             	add    rax,rdx
    2acf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    2ad7:	48 01 d0             	add    rax,rdx
    2ada:	48 01 c0             	add    rax,rax
    2add:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
    2ae1:	48 8d 05 58 56 00 00 	lea    rax,[rip+0x5658]        # 8140 <arena>
    2ae8:	48 01 d0             	add    rax,rdx
    2aeb:	c6 00 20             	mov    BYTE PTR [rax],0x20
    }
    2aee:	90                   	nop
    2aef:	5d                   	pop    rbp
    2af0:	c3                   	ret
    2af1:	90                   	nop

0000000000002af2 <Enemy::Enemy(int, int)>:
    Enemy(int ix, int iy) {
    2af2:	55                   	push   rbp
    2af3:	48 89 e5             	mov    rbp,rsp
    2af6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2afa:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    2afd:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
        x = ix;
    2b00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b04:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    2b07:	89 10                	mov    DWORD PTR [rax],edx
        y = iy;
    2b09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b0d:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    2b10:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
    }
    2b13:	90                   	nop
    2b14:	5d                   	pop    rbp
    2b15:	c3                   	ret

0000000000002b16 <Player::renderPlayer()>:
    void renderPlayer() {
    2b16:	55                   	push   rbp
    2b17:	48 89 e5             	mov    rbp,rsp
    2b1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        arena[y][x] = '@';
    2b1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b22:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    2b25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b29:	8b 00                	mov    eax,DWORD PTR [rax]
    2b2b:	48 63 c8             	movsxd rcx,eax
    2b2e:	48 63 d2             	movsxd rdx,edx
    2b31:	48 89 d0             	mov    rax,rdx
    2b34:	48 c1 e0 02          	shl    rax,0x2
    2b38:	48 01 d0             	add    rax,rdx
    2b3b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    2b43:	48 01 d0             	add    rax,rdx
    2b46:	48 01 c0             	add    rax,rax
    2b49:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
    2b4d:	48 8d 05 ec 55 00 00 	lea    rax,[rip+0x55ec]        # 8140 <arena>
    2b54:	48 01 d0             	add    rax,rdx
    2b57:	c6 00 40             	mov    BYTE PTR [rax],0x40
    }
    2b5a:	90                   	nop
    2b5b:	5d                   	pop    rbp
    2b5c:	c3                   	ret
    2b5d:	90                   	nop

0000000000002b5e <Player::derenderPlayer()>:
    void derenderPlayer() {
    2b5e:	55                   	push   rbp
    2b5f:	48 89 e5             	mov    rbp,rsp
    2b62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        arena[y][x] = ' ';
    2b66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b6a:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    2b6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2b71:	8b 00                	mov    eax,DWORD PTR [rax]
    2b73:	48 63 c8             	movsxd rcx,eax
    2b76:	48 63 d2             	movsxd rdx,edx
    2b79:	48 89 d0             	mov    rax,rdx
    2b7c:	48 c1 e0 02          	shl    rax,0x2
    2b80:	48 01 d0             	add    rax,rdx
    2b83:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    2b8b:	48 01 d0             	add    rax,rdx
    2b8e:	48 01 c0             	add    rax,rax
    2b91:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
    2b95:	48 8d 05 a4 55 00 00 	lea    rax,[rip+0x55a4]        # 8140 <arena>
    2b9c:	48 01 d0             	add    rax,rdx
    2b9f:	c6 00 20             	mov    BYTE PTR [rax],0x20
    }
    2ba2:	90                   	nop
    2ba3:	5d                   	pop    rbp
    2ba4:	c3                   	ret
    2ba5:	90                   	nop

0000000000002ba6 <Player::Player(int, int)>:
    Player(int ix, int iy) {
    2ba6:	55                   	push   rbp
    2ba7:	48 89 e5             	mov    rbp,rsp
    2baa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2bae:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    2bb1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
        x = ix;
    2bb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2bb8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    2bbb:	89 10                	mov    DWORD PTR [rax],edx
        y = iy;
    2bbd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2bc1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    2bc4:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
    }
    2bc7:	90                   	nop
    2bc8:	5d                   	pop    rbp
    2bc9:	c3                   	ret

0000000000002bca <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl::~_Vector_impl()>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
    2bca:	55                   	push   rbp
    2bcb:	48 89 e5             	mov    rbp,rsp
    2bce:	48 83 ec 10          	sub    rsp,0x10
    2bd2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2bd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2bda:	48 89 c7             	mov    rdi,rax
    2bdd:	e8 a0 02 00 00       	call   2e82 <std::allocator<Enemy>::~allocator()>
    2be2:	90                   	nop
    2be3:	c9                   	leave
    2be4:	c3                   	ret
    2be5:	90                   	nop

0000000000002be6 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_base()>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
    2be6:	55                   	push   rbp
    2be7:	48 89 e5             	mov    rbp,rsp
    2bea:	48 83 ec 10          	sub    rsp,0x10
    2bee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2bf2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2bf6:	48 89 c7             	mov    rdi,rax
    2bf9:	e8 5c 02 00 00       	call   2e5a <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl::_Vector_impl()>
    2bfe:	90                   	nop
    2bff:	c9                   	leave
    2c00:	c3                   	ret
    2c01:	90                   	nop

0000000000002c02 <std::vector<Enemy, std::allocator<Enemy> >::vector()>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
    2c02:	55                   	push   rbp
    2c03:	48 89 e5             	mov    rbp,rsp
    2c06:	48 83 ec 10          	sub    rsp,0x10
    2c0a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2c0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2c12:	48 89 c7             	mov    rdi,rax
    2c15:	e8 cc ff ff ff       	call   2be6 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_base()>
    2c1a:	90                   	nop
    2c1b:	c9                   	leave
    2c1c:	c3                   	ret
    2c1d:	90                   	nop

0000000000002c1e <__gnu_cxx::char_traits<char>::length(char const*)>:
    char_traits<_CharT>::
    2c1e:	55                   	push   rbp
    2c1f:	48 89 e5             	mov    rbp,rsp
    2c22:	48 83 ec 30          	sub    rsp,0x30
    2c26:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    2c2a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2c33:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2c37:	31 c0                	xor    eax,eax
      std::size_t __i = 0;
    2c39:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
      while (!eq(__p[__i], char_type()))
    2c41:	eb 05                	jmp    2c48 <__gnu_cxx::char_traits<char>::length(char const*)+0x2a>
        ++__i;
    2c43:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
      while (!eq(__p[__i], char_type()))
    2c48:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    2c4c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    2c50:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2c54:	48 01 c2             	add    rdx,rax
    2c57:	48 8d 45 ef          	lea    rax,[rbp-0x11]
    2c5b:	48 89 c6             	mov    rsi,rax
    2c5e:	48 89 d7             	mov    rdi,rdx
    2c61:	e8 24 05 00 00       	call   318a <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>
    2c66:	83 f0 01             	xor    eax,0x1
    2c69:	84 c0                	test   al,al
    2c6b:	75 d6                	jne    2c43 <__gnu_cxx::char_traits<char>::length(char const*)+0x25>
      return __i;
    2c6d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    }
    2c71:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    2c75:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    2c7e:	74 05                	je     2c85 <__gnu_cxx::char_traits<char>::length(char const*)+0x67>
    2c80:	e8 1b f5 ff ff       	call   21a0 <__stack_chk_fail@plt>
    2c85:	c9                   	leave
    2c86:	c3                   	ret
    2c87:	90                   	nop

0000000000002c88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
    2c88:	55                   	push   rbp
    2c89:	48 89 e5             	mov    rbp,rsp
    2c8c:	48 83 ec 10          	sub    rsp,0x10
    2c90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2c94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2c98:	48 89 c7             	mov    rdi,rax
    2c9b:	e8 a0 f3 ff ff       	call   2040 <std::allocator<char>::~allocator()@plt>
    2ca0:	90                   	nop
    2ca1:	c9                   	leave
    2ca2:	c3                   	ret
    2ca3:	90                   	nop

0000000000002ca4 <std::chrono::duration<long, std::ratio<1l, 1l> >::count() const>:
	count() const
    2ca4:	55                   	push   rbp
    2ca5:	48 89 e5             	mov    rbp,rsp
    2ca8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	{ return __r; }
    2cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2cb0:	48 8b 00             	mov    rax,QWORD PTR [rax]
    2cb3:	5d                   	pop    rbp
    2cb4:	c3                   	ret
    2cb5:	90                   	nop

0000000000002cb6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    2cb6:	55                   	push   rbp
    2cb7:	48 89 e5             	mov    rbp,rsp
    2cba:	53                   	push   rbx
    2cbb:	48 83 ec 38          	sub    rsp,0x38
    2cbf:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    2cc3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    2cc7:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
      : _M_dataplus(_M_local_data(), __a)
    2ccb:	48 8b 5d d8          	mov    rbx,QWORD PTR [rbp-0x28]
    2ccf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    2cd3:	48 89 c7             	mov    rdi,rax
    2cd6:	e8 05 f4 ff ff       	call   20e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
    2cdb:	48 89 c1             	mov    rcx,rax
    2cde:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    2ce2:	48 89 c2             	mov    rdx,rax
    2ce5:	48 89 ce             	mov    rsi,rcx
    2ce8:	48 89 df             	mov    rdi,rbx
    2ceb:	e8 70 f4 ff ff       	call   2160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
    2cf0:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
    2cf5:	75 0f                	jne    2d06 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x50>
	  std::__throw_logic_error(__N("basic_string: "
    2cf7:	48 8d 05 3a 23 00 00 	lea    rax,[rip+0x233a]        # 5038 <__pstl::execution::v1::unseq+0x25>
    2cfe:	48 89 c7             	mov    rdi,rax
    2d01:	e8 ba f3 ff ff       	call   20c0 <std::__throw_logic_error(char const*)@plt>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
    2d06:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    2d0a:	48 89 c7             	mov    rdi,rax
    2d0d:	e8 d9 fb ff ff       	call   28eb <std::char_traits<char>::length(char const*)>
    2d12:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    2d16:	48 01 d0             	add    rax,rdx
    2d19:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
	_M_construct(__s, __end, forward_iterator_tag());
    2d1d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    2d21:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    2d25:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    2d29:	48 89 ce             	mov    rsi,rcx
    2d2c:	48 89 c7             	mov    rdi,rax
    2d2f:	e8 bc 04 00 00       	call   31f0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
      }
    2d34:	eb 1a                	jmp    2d50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x9a>
    2d36:	48 89 c3             	mov    rbx,rax
    2d39:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    2d3d:	48 89 c7             	mov    rdi,rax
    2d40:	e8 43 ff ff ff       	call   2c88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
    2d45:	48 89 d8             	mov    rax,rbx
    2d48:	48 89 c7             	mov    rdi,rax
    2d4b:	e8 c0 f4 ff ff       	call   2210 <_Unwind_Resume@plt>
    2d50:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    2d54:	c9                   	leave
    2d55:	c3                   	ret

0000000000002d56 <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<int, void>(int const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    2d56:	55                   	push   rbp
    2d57:	48 89 e5             	mov    rbp,rsp
    2d5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2d5e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  : __r(static_cast<rep>(__rep)) { }
    2d62:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2d66:	8b 00                	mov    eax,DWORD PTR [rax]
    2d68:	48 63 d0             	movsxd rdx,eax
    2d6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2d6f:	48 89 10             	mov    QWORD PTR [rax],rdx
    2d72:	90                   	nop
    2d73:	5d                   	pop    rbp
    2d74:	c3                   	ret

0000000000002d75 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
#endif

    /// this_thread::sleep_for
    template<typename _Rep, typename _Period>
      inline void
      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
    2d75:	55                   	push   rbp
    2d76:	48 89 e5             	mov    rbp,rsp
    2d79:	48 83 ec 40          	sub    rsp,0x40
    2d7d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    2d81:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2d8a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2d8e:	31 c0                	xor    eax,eax
      {
	if (__rtime <= __rtime.zero())
    2d90:	e8 65 05 00 00       	call   32fa <std::chrono::duration<long, std::ratio<1l, 1000l> >::zero()>
    2d95:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    2d99:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
    2d9d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    2da1:	48 89 d6             	mov    rsi,rdx
    2da4:	48 89 c7             	mov    rdi,rax
    2da7:	e8 9b 05 00 00       	call   3347 <bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
    2dac:	84 c0                	test   al,al
    2dae:	0f 85 8e 00 00 00    	jne    2e42 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xcd>
	  return;
	auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
    2db4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    2db8:	48 89 c7             	mov    rdi,rax
    2dbb:	e8 af 05 00 00       	call   336f <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
    2dc0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
	auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);
    2dc4:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
    2dc8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    2dcc:	48 89 d6             	mov    rsi,rdx
    2dcf:	48 89 c7             	mov    rdi,rax
    2dd2:	e8 b2 05 00 00       	call   3389 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
    2dd7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    2ddb:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    2ddf:	48 89 c7             	mov    rdi,rax
    2de2:	e8 36 06 00 00       	call   341d <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
    2de7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
#ifdef _GLIBCXX_USE_NANOSLEEP
	struct ::timespec __ts =
	  {
	    static_cast<std::time_t>(__s.count()),
    2deb:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    2def:	48 89 c7             	mov    rdi,rax
    2df2:	e8 ad fe ff ff       	call   2ca4 <std::chrono::duration<long, std::ratio<1l, 1l> >::count() const>
	struct ::timespec __ts =
    2df7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
	    static_cast<long>(__ns.count())
    2dfb:	48 8d 45 d8          	lea    rax,[rbp-0x28]
    2dff:	48 89 c7             	mov    rdi,rax
    2e02:	e8 3f fb ff ff       	call   2946 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const>
	struct ::timespec __ts =
    2e07:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
	  };
	while (::nanosleep(&__ts, &__ts) == -1 && errno == EINTR)
    2e0b:	90                   	nop
    2e0c:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
    2e10:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    2e14:	48 89 d6             	mov    rsi,rdx
    2e17:	48 89 c7             	mov    rdi,rax
    2e1a:	e8 31 f2 ff ff       	call   2050 <nanosleep@plt>
    2e1f:	83 f8 ff             	cmp    eax,0xffffffff
    2e22:	75 13                	jne    2e37 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xc2>
    2e24:	e8 07 f2 ff ff       	call   2030 <__errno_location@plt>
    2e29:	8b 00                	mov    eax,DWORD PTR [rax]
    2e2b:	83 f8 04             	cmp    eax,0x4
    2e2e:	75 07                	jne    2e37 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xc2>
    2e30:	b8 01 00 00 00       	mov    eax,0x1
    2e35:	eb 05                	jmp    2e3c <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xc7>
    2e37:	b8 00 00 00 00       	mov    eax,0x0
    2e3c:	84 c0                	test   al,al
    2e3e:	75 cc                	jne    2e0c <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0x97>
    2e40:	eb 01                	jmp    2e43 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xce>
	  return;
    2e42:	90                   	nop
	  { }
#else
	__sleep_for(__s, __ns);
#endif
      }
    2e43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2e47:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    2e50:	74 05                	je     2e57 <void std::this_thread::sleep_for<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0xe2>
    2e52:	e8 49 f3 ff ff       	call   21a0 <__stack_chk_fail@plt>
    2e57:	c9                   	leave
    2e58:	c3                   	ret
    2e59:	90                   	nop

0000000000002e5a <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl::_Vector_impl()>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
    2e5a:	55                   	push   rbp
    2e5b:	48 89 e5             	mov    rbp,rsp
    2e5e:	48 83 ec 10          	sub    rsp,0x10
    2e62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	: _Tp_alloc_type()
    2e66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2e6a:	48 89 c7             	mov    rdi,rax
    2e6d:	e8 c6 05 00 00       	call   3438 <std::allocator<Enemy>::allocator()>
    2e72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2e76:	48 89 c7             	mov    rdi,rax
    2e79:	e8 d6 05 00 00       	call   3454 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl_data::_Vector_impl_data()>
	{ }
    2e7e:	90                   	nop
    2e7f:	c9                   	leave
    2e80:	c3                   	ret
    2e81:	90                   	nop

0000000000002e82 <std::allocator<Enemy>::~allocator()>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    2e82:	55                   	push   rbp
    2e83:	48 89 e5             	mov    rbp,rsp
    2e86:	48 83 ec 10          	sub    rsp,0x10
    2e8a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2e8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2e92:	48 89 c7             	mov    rdi,rax
    2e95:	e8 e8 05 00 00       	call   3482 <std::__new_allocator<Enemy>::~__new_allocator()>
    2e9a:	90                   	nop
    2e9b:	c9                   	leave
    2e9c:	c3                   	ret
    2e9d:	90                   	nop

0000000000002e9e <std::_Vector_base<Enemy, std::allocator<Enemy> >::~_Vector_base()>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    2e9e:	55                   	push   rbp
    2e9f:	48 89 e5             	mov    rbp,rsp
    2ea2:	48 83 ec 10          	sub    rsp,0x10
    2ea6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    2eaa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2eae:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    2eb2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2eb6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    2eb9:	48 29 c2             	sub    rdx,rax
    2ebc:	48 89 d0             	mov    rax,rdx
    2ebf:	48 c1 f8 03          	sar    rax,0x3
	_M_deallocate(_M_impl._M_start,
    2ec3:	48 89 c2             	mov    rdx,rax
    2ec6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2eca:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    2ecd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2ed1:	48 89 ce             	mov    rsi,rcx
    2ed4:	48 89 c7             	mov    rdi,rax
    2ed7:	e8 b2 05 00 00       	call   348e <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_deallocate(Enemy*, unsigned long)>
      }
    2edc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2ee0:	48 89 c7             	mov    rdi,rax
    2ee3:	e8 e2 fc ff ff       	call   2bca <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl::~_Vector_impl()>
    2ee8:	90                   	nop
    2ee9:	c9                   	leave
    2eea:	c3                   	ret
    2eeb:	90                   	nop

0000000000002eec <std::vector<Enemy, std::allocator<Enemy> >::~vector()>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
    2eec:	55                   	push   rbp
    2eed:	48 89 e5             	mov    rbp,rsp
    2ef0:	48 83 ec 10          	sub    rsp,0x10
    2ef4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
    2ef8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2efc:	48 89 c7             	mov    rdi,rax
    2eff:	e8 c0 05 00 00       	call   34c4 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator()>
    2f04:	48 89 c2             	mov    rdx,rax
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    2f07:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2f0b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
    2f0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2f13:	48 8b 00             	mov    rax,QWORD PTR [rax]
    2f16:	48 89 ce             	mov    rsi,rcx
    2f19:	48 89 c7             	mov    rdi,rax
    2f1c:	e8 b1 05 00 00       	call   34d2 <void std::_Destroy<Enemy*, Enemy>(Enemy*, Enemy*, std::allocator<Enemy>&)>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
    2f21:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2f25:	48 89 c7             	mov    rdi,rax
    2f28:	e8 71 ff ff ff       	call   2e9e <std::_Vector_base<Enemy, std::allocator<Enemy> >::~_Vector_base()>
    2f2d:	90                   	nop
    2f2e:	c9                   	leave
    2f2f:	c3                   	ret

0000000000002f30 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
      mersenne_twister_engine(result_type __sd)
    2f30:	55                   	push   rbp
    2f31:	48 89 e5             	mov    rbp,rsp
    2f34:	48 83 ec 10          	sub    rsp,0x10
    2f38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2f3c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      { seed(__sd); }
    2f40:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    2f44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2f48:	48 89 d6             	mov    rsi,rdx
    2f4b:	48 89 c7             	mov    rdi,rax
    2f4e:	e8 a9 05 00 00       	call   34fc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
    2f53:	90                   	nop
    2f54:	c9                   	leave
    2f55:	c3                   	ret

0000000000002f56 <std::uniform_int_distribution<int>::uniform_int_distribution(int, int)>:

      /**
       * @brief Constructs a uniform distribution object.
       */
      explicit
      uniform_int_distribution(_IntType __a,
    2f56:	55                   	push   rbp
    2f57:	48 89 e5             	mov    rbp,rsp
    2f5a:	48 83 ec 10          	sub    rsp,0x10
    2f5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2f62:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    2f65:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
			       _IntType __b
				 = __gnu_cxx::__int_traits<_IntType>::__max)
      : _M_param(__a, __b)
    2f68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2f6c:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    2f6f:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    2f72:	89 ce                	mov    esi,ecx
    2f74:	48 89 c7             	mov    rdi,rax
    2f77:	e8 26 06 00 00       	call   35a2 <std::uniform_int_distribution<int>::param_type::param_type(int, int)>
      { }
    2f7c:	90                   	nop
    2f7d:	c9                   	leave
    2f7e:	c3                   	ret
    2f7f:	90                   	nop

0000000000002f80 <std::vector<Enemy, std::allocator<Enemy> >::begin()>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
    2f80:	55                   	push   rbp
    2f81:	48 89 e5             	mov    rbp,rsp
    2f84:	48 83 ec 20          	sub    rsp,0x20
    2f88:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    2f8c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2f95:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2f99:	31 c0                	xor    eax,eax
      { return iterator(this->_M_impl._M_start); }
    2f9b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    2f9f:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    2fa3:	48 89 d6             	mov    rsi,rdx
    2fa6:	48 89 c7             	mov    rdi,rax
    2fa9:	e8 44 06 00 00       	call   35f2 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::__normal_iterator(Enemy* const&)>
    2fae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2fb2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    2fb6:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    2fbf:	74 05                	je     2fc6 <std::vector<Enemy, std::allocator<Enemy> >::begin()+0x46>
    2fc1:	e8 da f1 ff ff       	call   21a0 <__stack_chk_fail@plt>
    2fc6:	c9                   	leave
    2fc7:	c3                   	ret

0000000000002fc8 <std::vector<Enemy, std::allocator<Enemy> >::end()>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
    2fc8:	55                   	push   rbp
    2fc9:	48 89 e5             	mov    rbp,rsp
    2fcc:	48 83 ec 20          	sub    rsp,0x20
    2fd0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    2fd4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    2fdd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2fe1:	31 c0                	xor    eax,eax
      { return iterator(this->_M_impl._M_finish); }
    2fe3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    2fe7:	48 8d 50 08          	lea    rdx,[rax+0x8]
    2feb:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    2fef:	48 89 d6             	mov    rsi,rdx
    2ff2:	48 89 c7             	mov    rdi,rax
    2ff5:	e8 f8 05 00 00       	call   35f2 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::__normal_iterator(Enemy* const&)>
    2ffa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2ffe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3002:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    300b:	74 05                	je     3012 <std::vector<Enemy, std::allocator<Enemy> >::end()+0x4a>
    300d:	e8 8e f1 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3012:	c9                   	leave
    3013:	c3                   	ret

0000000000003014 <bool __gnu_cxx::operator!=<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&, __gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&)>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
    3014:	55                   	push   rbp
    3015:	48 89 e5             	mov    rbp,rsp
    3018:	53                   	push   rbx
    3019:	48 83 ec 18          	sub    rsp,0x18
    301d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3021:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
    3025:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3029:	48 89 c7             	mov    rdi,rax
    302c:	e8 df 05 00 00       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    3031:	48 8b 18             	mov    rbx,QWORD PTR [rax]
    3034:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    3038:	48 89 c7             	mov    rdi,rax
    303b:	e8 d0 05 00 00       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    3040:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3043:	48 39 c3             	cmp    rbx,rax
    3046:	0f 95 c0             	setne  al
    3049:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    304d:	c9                   	leave
    304e:	c3                   	ret
    304f:	90                   	nop

0000000000003050 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator++()>:
      operator++() _GLIBCXX_NOEXCEPT
    3050:	55                   	push   rbp
    3051:	48 89 e5             	mov    rbp,rsp
    3054:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	++_M_current;
    3058:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    305c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    305f:	48 8d 50 08          	lea    rdx,[rax+0x8]
    3063:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3067:	48 89 10             	mov    QWORD PTR [rax],rdx
	return *this;
    306a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
      }
    306e:	5d                   	pop    rbp
    306f:	c3                   	ret

0000000000003070 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator*() const>:
      operator*() const _GLIBCXX_NOEXCEPT
    3070:	55                   	push   rbp
    3071:	48 89 e5             	mov    rbp,rsp
    3074:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *_M_current; }
    3078:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    307c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    307f:	5d                   	pop    rbp
    3080:	c3                   	ret
    3081:	90                   	nop

0000000000003082 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&)>:
      /**
       * @brief Generating functions.
       */
      template<typename _UniformRandomBitGenerator>
	result_type
	operator()(_UniformRandomBitGenerator& __urng)
    3082:	55                   	push   rbp
    3083:	48 89 e5             	mov    rbp,rsp
    3086:	48 83 ec 10          	sub    rsp,0x10
    308a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    308e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        { return this->operator()(__urng, _M_param); }
    3092:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3096:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    309a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    309e:	48 89 ce             	mov    rsi,rcx
    30a1:	48 89 c7             	mov    rdi,rax
    30a4:	e8 75 05 00 00       	call   361e <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)>
    30a9:	c9                   	leave
    30aa:	c3                   	ret
    30ab:	90                   	nop

00000000000030ac <std::vector<Enemy, std::allocator<Enemy> >::push_back(Enemy const&)>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
    30ac:	55                   	push   rbp
    30ad:	48 89 e5             	mov    rbp,rsp
    30b0:	48 83 ec 10          	sub    rsp,0x10
    30b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    30b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    30bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30c0:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    30c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30c8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    30cc:	48 39 c2             	cmp    rdx,rax
    30cf:	74 31                	je     3102 <std::vector<Enemy, std::allocator<Enemy> >::push_back(Enemy const&)+0x56>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
    30d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30d5:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
    30d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30dd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    30e1:	48 89 ce             	mov    rsi,rcx
    30e4:	48 89 c7             	mov    rdi,rax
    30e7:	e8 9b 06 00 00       	call   3787 <void std::allocator_traits<std::allocator<Enemy> >::construct<Enemy, Enemy const&>(std::allocator<Enemy>&, Enemy*, Enemy const&)>
				     __x);
	    ++this->_M_impl._M_finish;
    30ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30f0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    30f4:	48 8d 50 08          	lea    rdx,[rax+0x8]
    30f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    30fc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
    3100:	eb 22                	jmp    3124 <std::vector<Enemy, std::allocator<Enemy> >::push_back(Enemy const&)+0x78>
	  _M_realloc_insert(end(), __x);
    3102:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3106:	48 89 c7             	mov    rdi,rax
    3109:	e8 ba fe ff ff       	call   2fc8 <std::vector<Enemy, std::allocator<Enemy> >::end()>
    310e:	48 89 c1             	mov    rcx,rax
    3111:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    3115:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3119:	48 89 ce             	mov    rsi,rcx
    311c:	48 89 c7             	mov    rdi,rax
    311f:	e8 9c 06 00 00       	call   37c0 <void std::vector<Enemy, std::allocator<Enemy> >::_M_realloc_insert<Enemy const&>(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >, Enemy const&)>
      }
    3124:	90                   	nop
    3125:	c9                   	leave
    3126:	c3                   	ret
    3127:	90                   	nop

0000000000003128 <std::vector<Enemy, std::allocator<Enemy> >::back()>:
      back() _GLIBCXX_NOEXCEPT
    3128:	55                   	push   rbp
    3129:	48 89 e5             	mov    rbp,rsp
    312c:	48 83 ec 30          	sub    rsp,0x30
    3130:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    3134:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    313d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3141:	31 c0                	xor    eax,eax
	return *(end() - 1);
    3143:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3147:	48 89 c7             	mov    rdi,rax
    314a:	e8 79 fe ff ff       	call   2fc8 <std::vector<Enemy, std::allocator<Enemy> >::end()>
    314f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3153:	48 8d 45 e8          	lea    rax,[rbp-0x18]
    3157:	be 01 00 00 00       	mov    esi,0x1
    315c:	48 89 c7             	mov    rdi,rax
    315f:	e8 12 08 00 00       	call   3976 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator-(long) const>
    3164:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    3168:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    316c:	48 89 c7             	mov    rdi,rax
    316f:	e8 fc fe ff ff       	call   3070 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator*() const>
      }
    3174:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3178:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3181:	74 05                	je     3188 <std::vector<Enemy, std::allocator<Enemy> >::back()+0x60>
    3183:	e8 18 f0 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3188:	c9                   	leave
    3189:	c3                   	ret

000000000000318a <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>:
      eq(const char_type& __c1, const char_type& __c2)
    318a:	55                   	push   rbp
    318b:	48 89 e5             	mov    rbp,rsp
    318e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3192:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      { return __c1 == __c2; }
    3196:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    319a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    319d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    31a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    31a4:	38 c2                	cmp    dl,al
    31a6:	0f 94 c0             	sete   al
    31a9:	5d                   	pop    rbp
    31aa:	c3                   	ret
    31ab:	90                   	nop

00000000000031ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
    31ac:	55                   	push   rbp
    31ad:	48 89 e5             	mov    rbp,rsp
    31b0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    31b4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    31b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    31bc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    31c0:	48 89 10             	mov    QWORD PTR [rax],rdx
    31c3:	90                   	nop
    31c4:	5d                   	pop    rbp
    31c5:	c3                   	ret

00000000000031c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard()>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
    31c6:	55                   	push   rbp
    31c7:	48 89 e5             	mov    rbp,rsp
    31ca:	48 83 ec 10          	sub    rsp,0x10
    31ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    31d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    31d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    31d9:	48 85 c0             	test   rax,rax
    31dc:	74 0f                	je     31ed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard()+0x27>
    31de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    31e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
    31e5:	48 89 c7             	mov    rdi,rax
    31e8:	e8 d3 ef ff ff       	call   21c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>
    31ed:	90                   	nop
    31ee:	c9                   	leave
    31ef:	c3                   	ret

00000000000031f0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
    31f0:	55                   	push   rbp
    31f1:	48 89 e5             	mov    rbp,rsp
    31f4:	48 83 ec 40          	sub    rsp,0x40
    31f8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    31fc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    3200:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    3204:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    320d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3211:	31 c0                	xor    eax,eax
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    3213:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    3217:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    321b:	48 89 d6             	mov    rsi,rdx
    321e:	48 89 c7             	mov    rdi,rax
    3221:	e8 b5 07 00 00       	call   39db <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
    3226:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
	if (__dnew > size_type(_S_local_capacity))
    322a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    322e:	48 83 f8 0f          	cmp    rax,0xf
    3232:	76 3f                	jbe    3273 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x83>
	    _M_data(_M_create(__dnew, size_type(0)));
    3234:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
    3238:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    323c:	ba 00 00 00 00       	mov    edx,0x0
    3241:	48 89 ce             	mov    rsi,rcx
    3244:	48 89 c7             	mov    rdi,rax
    3247:	e8 e4 ef ff ff       	call   2230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    324c:	48 89 c2             	mov    rdx,rax
    324f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3253:	48 89 d6             	mov    rsi,rdx
    3256:	48 89 c7             	mov    rdi,rax
    3259:	e8 92 ee ff ff       	call   20f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
	    _M_capacity(__dnew);
    325e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    3262:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3266:	48 89 d6             	mov    rsi,rdx
    3269:	48 89 c7             	mov    rdi,rax
    326c:	e8 df ef ff ff       	call   2250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
    3271:	eb 15                	jmp    3288 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x98>
    3273:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3277:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
	return _M_local_data();
    327b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    327f:	48 89 c7             	mov    rdi,rax
    3282:	e8 59 ee ff ff       	call   20e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
    3287:	90                   	nop

	  basic_string* _M_guarded;
	} __guard(this);
    3288:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    328c:	48 8d 45 e8          	lea    rax,[rbp-0x18]
    3290:	48 89 d6             	mov    rsi,rdx
    3293:	48 89 c7             	mov    rdi,rax
    3296:	e8 11 ff ff ff       	call   31ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::_Guard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>

	this->_S_copy_chars(_M_data(), __beg, __end);
    329b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    329f:	48 89 c7             	mov    rdi,rax
    32a2:	e8 d9 ee ff ff       	call   2180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
    32a7:	48 89 c1             	mov    rcx,rax
    32aa:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    32ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    32b2:	48 89 c6             	mov    rsi,rax
    32b5:	48 89 cf             	mov    rdi,rcx
    32b8:	e8 d3 ee ff ff       	call   2190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>

	__guard._M_guarded = 0;
    32bd:	48 c7 45 e8 00 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0

	_M_set_length(__dnew);
    32c5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    32c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    32cd:	48 89 d6             	mov    rsi,rdx
    32d0:	48 89 c7             	mov    rdi,rax
    32d3:	e8 d8 ed ff ff       	call   20b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
      }
    32d8:	48 8d 45 e8          	lea    rax,[rbp-0x18]
    32dc:	48 89 c7             	mov    rdi,rax
    32df:	e8 e2 fe ff ff       	call   31c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)::_Guard::~_Guard()>
    32e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    32e8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    32f1:	74 05                	je     32f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x108>
    32f3:	e8 a8 ee ff ff       	call   21a0 <__stack_chk_fail@plt>
    32f8:	c9                   	leave
    32f9:	c3                   	ret

00000000000032fa <std::chrono::duration<long, std::ratio<1l, 1000l> >::zero()>:
	    return *this;
	  }

	// 20.11.5.4 special values
	static constexpr duration
	zero() noexcept
    32fa:	55                   	push   rbp
    32fb:	48 89 e5             	mov    rbp,rsp
    32fe:	48 83 ec 20          	sub    rsp,0x20
    3302:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    330b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    330f:	31 c0                	xor    eax,eax
	{ return duration(duration_values<rep>::zero()); }
    3311:	e8 25 f6 ff ff       	call   293b <std::chrono::duration_values<long>::zero()>
    3316:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    331a:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
    331e:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    3322:	48 89 d6             	mov    rsi,rdx
    3325:	48 89 c7             	mov    rdi,rax
    3328:	e8 df 06 00 00       	call   3a0c <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&)>
    332d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    3331:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3335:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    333e:	74 05                	je     3345 <std::chrono::duration<long, std::ratio<1l, 1000l> >::zero()+0x4b>
    3340:	e8 5b ee ff ff       	call   21a0 <__stack_chk_fail@plt>
    3345:	c9                   	leave
    3346:	c3                   	ret

0000000000003347 <bool std::chrono::operator<=<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
#endif

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
    3347:	55                   	push   rbp
    3348:	48 89 e5             	mov    rbp,rsp
    334b:	48 83 ec 10          	sub    rsp,0x10
    334f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3353:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
		 const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }
    3357:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    335b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    335f:	48 89 d6             	mov    rsi,rdx
    3362:	48 89 c7             	mov    rdi,rax
    3365:	e8 bf 06 00 00       	call   3a29 <bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
    336a:	83 f0 01             	xor    eax,0x1
    336d:	c9                   	leave
    336e:	c3                   	ret

000000000000336f <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1l> > >::value, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    336f:	55                   	push   rbp
    3370:	48 89 e5             	mov    rbp,rsp
    3373:	48 83 ec 10          	sub    rsp,0x10
    3377:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	return __dc::__cast(__d);
    337b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    337f:	48 89 c7             	mov    rdi,rax
    3382:	e8 13 07 00 00       	call   3a9a <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
      }
    3387:	c9                   	leave
    3388:	c3                   	ret

0000000000003389 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
      operator-(const duration<_Rep1, _Period1>& __lhs,
    3389:	55                   	push   rbp
    338a:	48 89 e5             	mov    rbp,rsp
    338d:	53                   	push   rbx
    338e:	48 83 ec 48          	sub    rsp,0x48
    3392:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
    3396:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    339a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    33a3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    33a7:	31 c0                	xor    eax,eax
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
    33a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    33ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
    33b0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    33b4:	48 8d 45 c8          	lea    rax,[rbp-0x38]
    33b8:	48 89 c7             	mov    rdi,rax
    33bb:	e8 56 07 00 00       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    33c0:	48 89 c3             	mov    rbx,rax
    33c3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
    33c7:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    33cb:	48 89 d6             	mov    rsi,rdx
    33ce:	48 89 c7             	mov    rdi,rax
    33d1:	e8 52 07 00 00       	call   3b28 <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
    33d6:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    33da:	48 89 c7             	mov    rdi,rax
    33dd:	e8 34 07 00 00       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    33e2:	48 29 c3             	sub    rbx,rax
    33e5:	48 89 da             	mov    rdx,rbx
    33e8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    33ec:	48 8d 55 d8          	lea    rdx,[rbp-0x28]
    33f0:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    33f4:	48 89 d6             	mov    rsi,rdx
    33f7:	48 89 c7             	mov    rdi,rax
    33fa:	e8 0d 06 00 00       	call   3a0c <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&)>
    33ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
      }
    3403:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3407:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3410:	74 05                	je     3417 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::chrono::duration<long, std::ratio<1l, 1l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x8e>
    3412:	e8 89 ed ff ff       	call   21a0 <__stack_chk_fail@plt>
    3417:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    341b:	c9                   	leave
    341c:	c3                   	ret

000000000000341d <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    341d:	55                   	push   rbp
    341e:	48 89 e5             	mov    rbp,rsp
    3421:	48 83 ec 10          	sub    rsp,0x10
    3425:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	return __dc::__cast(__d);
    3429:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    342d:	48 89 c7             	mov    rdi,rax
    3430:	e8 4c 07 00 00       	call   3b81 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>
      }
    3435:	c9                   	leave
    3436:	c3                   	ret
    3437:	90                   	nop

0000000000003438 <std::allocator<Enemy>::allocator()>:
      allocator() _GLIBCXX_NOTHROW { }
    3438:	55                   	push   rbp
    3439:	48 89 e5             	mov    rbp,rsp
    343c:	48 83 ec 10          	sub    rsp,0x10
    3440:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3444:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3448:	48 89 c7             	mov    rdi,rax
    344b:	e8 90 07 00 00       	call   3be0 <std::__new_allocator<Enemy>::__new_allocator()>
    3450:	90                   	nop
    3451:	c9                   	leave
    3452:	c3                   	ret
    3453:	90                   	nop

0000000000003454 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_Vector_impl_data::_Vector_impl_data()>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    3454:	55                   	push   rbp
    3455:	48 89 e5             	mov    rbp,rsp
    3458:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	: _M_start(), _M_finish(), _M_end_of_storage()
    345c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3460:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    3467:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    346b:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
    3473:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3477:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
	{ }
    347f:	90                   	nop
    3480:	5d                   	pop    rbp
    3481:	c3                   	ret

0000000000003482 <std::__new_allocator<Enemy>::~__new_allocator()>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3482:	55                   	push   rbp
    3483:	48 89 e5             	mov    rbp,rsp
    3486:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    348a:	90                   	nop
    348b:	5d                   	pop    rbp
    348c:	c3                   	ret
    348d:	90                   	nop

000000000000348e <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_deallocate(Enemy*, unsigned long)>:
      _M_deallocate(pointer __p, size_t __n)
    348e:	55                   	push   rbp
    348f:	48 89 e5             	mov    rbp,rsp
    3492:	48 83 ec 20          	sub    rsp,0x20
    3496:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    349a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    349e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__p)
    34a2:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    34a7:	74 17                	je     34c0 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_deallocate(Enemy*, unsigned long)+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    34a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    34ad:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    34b1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    34b5:	48 89 ce             	mov    rsi,rcx
    34b8:	48 89 c7             	mov    rdi,rax
    34bb:	e8 2b 07 00 00       	call   3beb <std::allocator_traits<std::allocator<Enemy> >::deallocate(std::allocator<Enemy>&, Enemy*, unsigned long)>
      }
    34c0:	90                   	nop
    34c1:	c9                   	leave
    34c2:	c3                   	ret
    34c3:	90                   	nop

00000000000034c4 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    34c4:	55                   	push   rbp
    34c5:	48 89 e5             	mov    rbp,rsp
    34c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return this->_M_impl; }
    34cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    34d0:	5d                   	pop    rbp
    34d1:	c3                   	ret

00000000000034d2 <void std::_Destroy<Enemy*, Enemy>(Enemy*, Enemy*, std::allocator<Enemy>&)>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    34d2:	55                   	push   rbp
    34d3:	48 89 e5             	mov    rbp,rsp
    34d6:	48 83 ec 20          	sub    rsp,0x20
    34da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    34de:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    34e2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    34e6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    34ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    34ee:	48 89 d6             	mov    rsi,rdx
    34f1:	48 89 c7             	mov    rdi,rax
    34f4:	e8 20 07 00 00       	call   3c19 <void std::_Destroy<Enemy*>(Enemy*, Enemy*)>
    }
    34f9:	90                   	nop
    34fa:	c9                   	leave
    34fb:	c3                   	ret

00000000000034fc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
	   size_t __w, size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
    34fc:	55                   	push   rbp
    34fd:	48 89 e5             	mov    rbp,rsp
    3500:	48 83 ec 20          	sub    rsp,0x20
    3504:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3508:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
			    __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
	__detail::_Shift<_UIntType, __w>::__value>(__sd);
    350c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    3510:	48 89 c7             	mov    rdi,rax
    3513:	e8 27 07 00 00       	call   3c3f <unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long)>
      _M_x[0] = __detail::__mod<_UIntType,
    3518:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    351c:	48 89 02             	mov    QWORD PTR [rdx],rax

      for (size_t __i = 1; __i < state_size; ++__i)
    351f:	48 c7 45 f0 01 00 00 00 	mov    QWORD PTR [rbp-0x10],0x1
    3527:	eb 5c                	jmp    3585 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0x89>
	{
	  _UIntType __x = _M_x[__i - 1];
    3529:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    352d:	48 8d 50 ff          	lea    rdx,[rax-0x1]
    3531:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3535:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    3539:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	  __x ^= __x >> (__w - 2);
    353d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3541:	48 c1 e8 1e          	shr    rax,0x1e
    3545:	48 31 45 f8          	xor    QWORD PTR [rbp-0x8],rax
	  __x *= __f;
    3549:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    354d:	48 69 c0 65 89 07 6c 	imul   rax,rax,0x6c078965
    3554:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	  __x += __detail::__mod<_UIntType, __n>(__i);
    3558:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    355c:	48 89 c7             	mov    rdi,rax
    355f:	e8 fd 06 00 00       	call   3c61 <unsigned long std::__detail::__mod<unsigned long, 624ul, 1ul, 0ul>(unsigned long)>
    3564:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
	  _M_x[__i] = __detail::__mod<_UIntType,
	    __detail::_Shift<_UIntType, __w>::__value>(__x);
    3568:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    356c:	48 89 c7             	mov    rdi,rax
    356f:	e8 cb 06 00 00       	call   3c3f <unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long)>
	  _M_x[__i] = __detail::__mod<_UIntType,
    3574:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3578:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    357c:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
      for (size_t __i = 1; __i < state_size; ++__i)
    3580:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    3585:	48 81 7d f0 6f 02 00 00 	cmp    QWORD PTR [rbp-0x10],0x26f
    358d:	76 9a                	jbe    3529 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0x2d>
	}
      _M_p = state_size;
    358f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3593:	48 c7 80 80 13 00 00 70 02 00 00 	mov    QWORD PTR [rax+0x1380],0x270
    }
    359e:	90                   	nop
    359f:	c9                   	leave
    35a0:	c3                   	ret
    35a1:	90                   	nop

00000000000035a2 <std::uniform_int_distribution<int>::param_type::param_type(int, int)>:
	param_type(_IntType __a,
    35a2:	55                   	push   rbp
    35a3:	48 89 e5             	mov    rbp,rsp
    35a6:	48 83 ec 10          	sub    rsp,0x10
    35aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    35ae:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    35b1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
	: _M_a(__a), _M_b(__b)
    35b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    35b8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    35bb:	89 10                	mov    DWORD PTR [rax],edx
    35bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    35c1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    35c4:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
	  __glibcxx_assert(_M_a <= _M_b);
    35c7:	e8 02 f3 ff ff       	call   28ce <std::__is_constant_evaluated()>
    35cc:	84 c0                	test   al,al
    35ce:	74 18                	je     35e8 <std::uniform_int_distribution<int>::param_type::param_type(int, int)+0x46>
    35d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    35d4:	8b 10                	mov    edx,DWORD PTR [rax]
    35d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    35da:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    35dd:	39 c2                	cmp    edx,eax
    35df:	7e 07                	jle    35e8 <std::uniform_int_distribution<int>::param_type::param_type(int, int)+0x46>
    35e1:	b8 01 00 00 00       	mov    eax,0x1
    35e6:	eb 05                	jmp    35ed <std::uniform_int_distribution<int>::param_type::param_type(int, int)+0x4b>
    35e8:	b8 00 00 00 00       	mov    eax,0x0
    35ed:	84 c0                	test   al,al
	}
    35ef:	90                   	nop
    35f0:	c9                   	leave
    35f1:	c3                   	ret

00000000000035f2 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::__normal_iterator(Enemy* const&)>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    35f2:	55                   	push   rbp
    35f3:	48 89 e5             	mov    rbp,rsp
    35f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    35fa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      : _M_current(__i) { }
    35fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    3602:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    3605:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3609:	48 89 10             	mov    QWORD PTR [rax],rdx
    360c:	90                   	nop
    360d:	5d                   	pop    rbp
    360e:	c3                   	ret
    360f:	90                   	nop

0000000000003610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>:
      base() const _GLIBCXX_NOEXCEPT
    3610:	55                   	push   rbp
    3611:	48 89 e5             	mov    rbp,rsp
    3614:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return _M_current; }
    3618:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    361c:	5d                   	pop    rbp
    361d:	c3                   	ret

000000000000361e <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)>:
    };

  template<typename _IntType>
    template<typename _UniformRandomBitGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
    361e:	55                   	push   rbp
    361f:	48 89 e5             	mov    rbp,rsp
    3622:	53                   	push   rbx
    3623:	48 81 ec 88 00 00 00 	sub    rsp,0x88
    362a:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
    362e:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
    3632:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
    3639:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3642:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3646:	31 c0                	xor    eax,eax
      {
	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
	typedef typename make_unsigned<result_type>::type __utype;
	typedef typename common_type<_Gresult_type, __utype>::type __uctype;

	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
    3648:	48 c7 45 a8 00 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
    3650:	b8 ff ff ff ff       	mov    eax,0xffffffff
    3655:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
	static_assert( __urngmin < __urngmax,
	    "Uniform random bit generator must define min() < max()");
	constexpr __uctype __urngrange = __urngmax - __urngmin;
    3659:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax

	const __uctype __urange
	  = __uctype(__param.b()) - __uctype(__param.a());
    365d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
    3664:	48 89 c7             	mov    rdi,rax
    3667:	e8 18 06 00 00       	call   3c84 <std::uniform_int_distribution<int>::param_type::b() const>
    366c:	48 63 d8             	movsxd rbx,eax
    366f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
    3676:	48 89 c7             	mov    rdi,rax
    3679:	e8 18 06 00 00       	call   3c96 <std::uniform_int_distribution<int>::param_type::a() const>
    367e:	48 98                	cdqe
	const __uctype __urange
    3680:	48 29 c3             	sub    rbx,rax
    3683:	48 89 da             	mov    rdx,rbx
    3686:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx

	__uctype __ret;
	if (__urngrange > __urange)
    368a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
    368f:	48 3b 45 c0          	cmp    rax,QWORD PTR [rbp-0x40]
    3693:	72 2f                	jb     36c4 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0xa6>
	  {
	    // downscaling

	    const __uctype __uerange = __urange + 1; // __urange can be zero
    3695:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    3699:	48 83 c0 01          	add    rax,0x1
    369d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
#endif
	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)
	      {
		// __urng produces values that use exactly 32-bits,
		// so use 64-bit integers to downscale to desired range.
		__UINT32_TYPE__ __u32erange = __uerange;
    36a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    36a5:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
    36a8:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
    36ab:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
    36af:	89 d6                	mov    esi,edx
    36b1:	48 89 c7             	mov    rdi,rax
    36b4:	e8 ed 05 00 00       	call   3ca6 <unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)>
    36b9:	89 c0                	mov    eax,eax
    36bb:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    36bf:	e9 92 00 00 00       	jmp    3756 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0x138>
		  __ret = __uctype(__urng()) - __urngmin;
		while (__ret >= __past);
		__ret /= __scaling;
	      }
	  }
	else if (__urngrange < __urange)
    36c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
    36c9:	48 3b 45 c0          	cmp    rax,QWORD PTR [rbp-0x40]
    36cd:	73 77                	jae    3746 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0x128>
	      low in [0, urngrange].
	    */
	    __uctype __tmp; // wraparound control
	    do
	      {
		const __uctype __uerngrange = __urngrange + 1;
    36cf:	48 b8 00 00 00 00 01 00 00 00 	movabs rax,0x100000000
    36d9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
		__tmp = (__uerngrange * operator()
			 (__urng, param_type(0, __urange / __uerngrange)));
    36dd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    36e1:	48 c1 e8 20          	shr    rax,0x20
    36e5:	89 c2                	mov    edx,eax
    36e7:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    36eb:	be 00 00 00 00       	mov    esi,0x0
    36f0:	48 89 c7             	mov    rdi,rax
    36f3:	e8 aa fe ff ff       	call   35a2 <std::uniform_int_distribution<int>::param_type::param_type(int, int)>
    36f8:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
    36fc:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
    3700:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
    3704:	48 89 ce             	mov    rsi,rcx
    3707:	48 89 c7             	mov    rdi,rax
    370a:	e8 0f ff ff ff       	call   361e <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)>
    370f:	48 98                	cdqe
		__tmp = (__uerngrange * operator()
    3711:	48 c1 e0 20          	shl    rax,0x20
    3715:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
		__ret = __tmp + (__uctype(__urng()) - __urngmin);
    3719:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
    371d:	48 89 c7             	mov    rdi,rax
    3720:	e8 f9 05 00 00       	call   3d1e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
    3725:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    3729:	48 01 d0             	add    rax,rdx
    372c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
	      }
	    while (__ret > __urange || __ret < __tmp);
    3730:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    3734:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
    3738:	72 95                	jb     36cf <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0xb1>
    373a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    373e:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
    3742:	72 8b                	jb     36cf <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0xb1>
    3744:	eb 10                	jmp    3756 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0x138>
	  }
	else
	  __ret = __uctype(__urng()) - __urngmin;
    3746:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
    374a:	48 89 c7             	mov    rdi,rax
    374d:	e8 cc 05 00 00       	call   3d1e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
    3752:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax

	return __ret + __param.a();
    3756:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
    375d:	48 89 c7             	mov    rdi,rax
    3760:	e8 31 05 00 00       	call   3c96 <std::uniform_int_distribution<int>::param_type::a() const>
    3765:	89 c2                	mov    edx,eax
    3767:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    376b:	01 d0                	add    eax,edx
      }
    376d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3771:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    377a:	74 05                	je     3781 <int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)+0x163>
    377c:	e8 1f ea ff ff       	call   21a0 <__stack_chk_fail@plt>
    3781:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3785:	c9                   	leave
    3786:	c3                   	ret

0000000000003787 <void std::allocator_traits<std::allocator<Enemy> >::construct<Enemy, Enemy const&>(std::allocator<Enemy>&, Enemy*, Enemy const&)>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    3787:	55                   	push   rbp
    3788:	48 89 e5             	mov    rbp,rsp
    378b:	48 83 ec 20          	sub    rsp,0x20
    378f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3793:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    3797:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	  __a.construct(__p, std::forward<_Args>(__args)...);
    379b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    379f:	48 89 c7             	mov    rdi,rax
    37a2:	e8 0a 06 00 00       	call   3db1 <Enemy const& std::forward<Enemy const&>(std::remove_reference<Enemy const&>::type&)>
    37a7:	48 89 c2             	mov    rdx,rax
    37aa:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    37ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    37b2:	48 89 ce             	mov    rsi,rcx
    37b5:	48 89 c7             	mov    rdi,rax
    37b8:	e8 03 06 00 00       	call   3dc0 <void std::__new_allocator<Enemy>::construct<Enemy, Enemy const&>(Enemy*, Enemy const&)>
	}
    37bd:	90                   	nop
    37be:	c9                   	leave
    37bf:	c3                   	ret

00000000000037c0 <void std::vector<Enemy, std::allocator<Enemy> >::_M_realloc_insert<Enemy const&>(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >, Enemy const&)>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
    37c0:	55                   	push   rbp
    37c1:	48 89 e5             	mov    rbp,rsp
    37c4:	53                   	push   rbx
    37c5:	48 83 ec 68          	sub    rsp,0x68
    37c9:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
    37cd:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
    37d1:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    37d5:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    37de:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    37e2:	31 c0                	xor    eax,eax
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
    37e4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    37e8:	48 8d 15 7b 18 00 00 	lea    rdx,[rip+0x187b]        # 506a <__pstl::execution::v1::unseq+0x57>
    37ef:	be 01 00 00 00       	mov    esi,0x1
    37f4:	48 89 c7             	mov    rdi,rax
    37f7:	e8 06 06 00 00       	call   3e02 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const>
    37fc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
      pointer __old_start = this->_M_impl._M_start;
    3800:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    3804:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3807:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
      pointer __old_finish = this->_M_impl._M_finish;
    380b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    380f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    3813:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
      const size_type __elems_before = __position - begin();
    3817:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    381b:	48 89 c7             	mov    rdi,rax
    381e:	e8 5d f7 ff ff       	call   2f80 <std::vector<Enemy, std::allocator<Enemy> >::begin()>
    3823:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    3827:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
    382b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    382f:	48 89 d6             	mov    rsi,rdx
    3832:	48 89 c7             	mov    rdi,rax
    3835:	e8 b3 06 00 00       	call   3eed <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::difference_type __gnu_cxx::operator-<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&, __gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&)>
    383a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
      pointer __new_start(this->_M_allocate(__len));
    383e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    3842:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    3846:	48 89 d6             	mov    rsi,rdx
    3849:	48 89 c7             	mov    rdi,rax
    384c:	e8 df 06 00 00       	call   3f30 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_allocate(unsigned long)>
    3851:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
      pointer __new_finish(__new_start);
    3855:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3859:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
    385d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    3861:	48 89 c7             	mov    rdi,rax
    3864:	e8 48 05 00 00       	call   3db1 <Enemy const& std::forward<Enemy const&>(std::remove_reference<Enemy const&>::type&)>
    3869:	48 89 c2             	mov    rdx,rax
				   __new_start + __elems_before,
    386c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    3870:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
	  _Alloc_traits::construct(this->_M_impl,
    3878:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    387c:	48 01 c1             	add    rcx,rax
    387f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    3883:	48 89 ce             	mov    rsi,rcx
    3886:	48 89 c7             	mov    rdi,rax
    3889:	e8 f9 fe ff ff       	call   3787 <void std::allocator_traits<std::allocator<Enemy> >::construct<Enemy, Enemy const&>(std::allocator<Enemy>&, Enemy*, Enemy const&)>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
    388e:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());
    3896:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    389a:	48 89 c7             	mov    rdi,rax
    389d:	e8 22 fc ff ff       	call   34c4 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator()>
    38a2:	48 89 c3             	mov    rbx,rax
	      __new_finish = _S_relocate(__old_start, __position.base(),
    38a5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    38a9:	48 89 c7             	mov    rdi,rax
    38ac:	e8 5f fd ff ff       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    38b1:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    38b4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    38b8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    38bc:	48 89 d9             	mov    rcx,rbx
    38bf:	48 89 c7             	mov    rdi,rax
    38c2:	e8 9c 06 00 00       	call   3f63 <std::vector<Enemy, std::allocator<Enemy> >::_S_relocate(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>
    38c7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax

	      ++__new_finish;
    38cb:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8

	      __new_finish = _S_relocate(__position.base(), __old_finish,
					 __new_finish, _M_get_Tp_allocator());
    38d0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    38d4:	48 89 c7             	mov    rdi,rax
    38d7:	e8 e8 fb ff ff       	call   34c4 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator()>
    38dc:	48 89 c3             	mov    rbx,rax
	      __new_finish = _S_relocate(__position.base(), __old_finish,
    38df:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    38e3:	48 89 c7             	mov    rdi,rax
    38e6:	e8 25 fd ff ff       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    38eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    38ee:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    38f2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    38f6:	48 89 d9             	mov    rcx,rbx
    38f9:	48 89 c7             	mov    rdi,rax
    38fc:	e8 62 06 00 00       	call   3f63 <std::vector<Enemy, std::allocator<Enemy> >::_S_relocate(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>
    3901:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
    3905:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
		    this->_M_impl._M_end_of_storage - __old_start);
    3909:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
    390d:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
    3911:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
    3915:	48 c1 fa 03          	sar    rdx,0x3
      _M_deallocate(__old_start,
    3919:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    391d:	48 89 ce             	mov    rsi,rcx
    3920:	48 89 c7             	mov    rdi,rax
    3923:	e8 66 fb ff ff       	call   348e <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_deallocate(Enemy*, unsigned long)>
      this->_M_impl._M_start = __new_start;
    3928:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    392c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    3930:	48 89 10             	mov    QWORD PTR [rax],rdx
      this->_M_impl._M_finish = __new_finish;
    3933:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    3937:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    393b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
      this->_M_impl._M_end_of_storage = __new_start + __len;
    393f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    3943:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    394b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    394f:	48 01 c2             	add    rdx,rax
    3952:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    3956:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    }
    395a:	90                   	nop
    395b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    395f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    3968:	74 05                	je     396f <void std::vector<Enemy, std::allocator<Enemy> >::_M_realloc_insert<Enemy const&>(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >, Enemy const&)+0x1af>
    396a:	e8 31 e8 ff ff       	call   21a0 <__stack_chk_fail@plt>
    396f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3973:	c9                   	leave
    3974:	c3                   	ret
    3975:	90                   	nop

0000000000003976 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator-(long) const>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
    3976:	55                   	push   rbp
    3977:	48 89 e5             	mov    rbp,rsp
    397a:	48 83 ec 30          	sub    rsp,0x30
    397e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    3982:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    3986:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    398f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3993:	31 c0                	xor    eax,eax
      { return __normal_iterator(_M_current - __n); }
    3995:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3999:	48 8b 00             	mov    rax,QWORD PTR [rax]
    399c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    39a0:	48 c1 e2 03          	shl    rdx,0x3
    39a4:	48 f7 da             	neg    rdx
    39a7:	48 01 d0             	add    rax,rdx
    39aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    39ae:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
    39b2:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    39b6:	48 89 d6             	mov    rsi,rdx
    39b9:	48 89 c7             	mov    rdi,rax
    39bc:	e8 31 fc ff ff       	call   35f2 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::__normal_iterator(Enemy* const&)>
    39c1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    39c5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    39c9:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    39d2:	74 05                	je     39d9 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::operator-(long) const+0x63>
    39d4:	e8 c7 e7 ff ff       	call   21a0 <__stack_chk_fail@plt>
    39d9:	c9                   	leave
    39da:	c3                   	ret

00000000000039db <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    39db:	55                   	push   rbp
    39dc:	48 89 e5             	mov    rbp,rsp
    39df:	48 83 ec 10          	sub    rsp,0x10
    39e3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    39e7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    39eb:	48 8d 45 f8          	lea    rax,[rbp-0x8]
    39ef:	48 89 c7             	mov    rdi,rax
    39f2:	e8 c4 05 00 00       	call   3fbb <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>
      return std::__distance(__first, __last,
    39f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    39fb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    39ff:	48 89 d6             	mov    rsi,rdx
    3a02:	48 89 c7             	mov    rdi,rax
    3a05:	e8 bc 05 00 00       	call   3fc6 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>
    }
    3a0a:	c9                   	leave
    3a0b:	c3                   	ret

0000000000003a0c <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    3a0c:	55                   	push   rbp
    3a0d:	48 89 e5             	mov    rbp,rsp
    3a10:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3a14:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  : __r(static_cast<rep>(__rep)) { }
    3a18:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    3a1c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    3a1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3a23:	48 89 10             	mov    QWORD PTR [rax],rdx
    3a26:	90                   	nop
    3a27:	5d                   	pop    rbp
    3a28:	c3                   	ret

0000000000003a29 <bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    3a29:	55                   	push   rbp
    3a2a:	48 89 e5             	mov    rbp,rsp
    3a2d:	53                   	push   rbx
    3a2e:	48 83 ec 38          	sub    rsp,0x38
    3a32:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    3a36:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    3a3a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3a43:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3a47:	31 c0                	xor    eax,eax
	return __ct(__lhs).count() < __ct(__rhs).count();
    3a49:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3a4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3a50:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    3a54:	48 8d 45 d8          	lea    rax,[rbp-0x28]
    3a58:	48 89 c7             	mov    rdi,rax
    3a5b:	e8 b6 00 00 00       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    3a60:	48 89 c3             	mov    rbx,rax
    3a63:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    3a67:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3a6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    3a6e:	48 8d 45 e0          	lea    rax,[rbp-0x20]
    3a72:	48 89 c7             	mov    rdi,rax
    3a75:	e8 9c 00 00 00       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    3a7a:	48 39 c3             	cmp    rbx,rax
    3a7d:	0f 9c c0             	setl   al
      }
    3a80:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3a84:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3a8d:	74 05                	je     3a94 <bool std::chrono::operator< <long, std::ratio<1l, 1000l>, long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0x6b>
    3a8f:	e8 0c e7 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3a94:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3a98:	c9                   	leave
    3a99:	c3                   	ret

0000000000003a9a <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    3a9a:	55                   	push   rbp
    3a9b:	48 89 e5             	mov    rbp,rsp
    3a9e:	48 83 ec 30          	sub    rsp,0x30
    3aa2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    3aa6:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3aaf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3ab3:	31 c0                	xor    eax,eax
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3ab5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3ab9:	48 89 c7             	mov    rdi,rax
    3abc:	e8 55 00 00 00       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    3ac1:	48 89 c1             	mov    rcx,rax
    3ac4:	48 ba cf f7 53 e3 a5 9b c4 20 	movabs rdx,0x20c49ba5e353f7cf
    3ace:	48 89 c8             	mov    rax,rcx
    3ad1:	48 f7 ea             	imul   rdx
    3ad4:	48 89 d0             	mov    rax,rdx
    3ad7:	48 c1 f8 07          	sar    rax,0x7
    3adb:	48 c1 f9 3f          	sar    rcx,0x3f
    3adf:	48 89 ca             	mov    rdx,rcx
    3ae2:	48 29 d0             	sub    rax,rdx
	    return _ToDur(static_cast<__to_rep>(
    3ae5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3ae9:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
    3aed:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    3af1:	48 89 d6             	mov    rsi,rdx
    3af4:	48 89 c7             	mov    rdi,rax
    3af7:	e8 5c ee ff ff       	call   2958 <std::chrono::duration<long, std::ratio<1l, 1l> >::duration<long, void>(long const&)>
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
    3afc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
	  }
    3b00:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3b04:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3b0d:	74 05                	je     3b14 <std::chrono::duration<long, std::ratio<1l, 1l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1l> >, std::ratio<1l, 1000l>, long, true, false>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0x7a>
    3b0f:	e8 8c e6 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3b14:	c9                   	leave
    3b15:	c3                   	ret

0000000000003b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>:
	count() const
    3b16:	55                   	push   rbp
    3b17:	48 89 e5             	mov    rbp,rsp
    3b1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	{ return __r; }
    3b1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3b22:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3b25:	5d                   	pop    rbp
    3b26:	c3                   	ret
    3b27:	90                   	nop

0000000000003b28 <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    3b28:	55                   	push   rbp
    3b29:	48 89 e5             	mov    rbp,rsp
    3b2c:	48 83 ec 20          	sub    rsp,0x20
    3b30:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3b34:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    3b38:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3b41:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3b45:	31 c0                	xor    eax,eax
	  : __r(duration_cast<duration>(__d).count()) { }
    3b47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    3b4b:	48 89 c7             	mov    rdi,rax
    3b4e:	e8 89 04 00 00       	call   3fdc <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
    3b53:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    3b57:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    3b5b:	48 89 c7             	mov    rdi,rax
    3b5e:	e8 b3 ff ff ff       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    3b63:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3b67:	48 89 02             	mov    QWORD PTR [rdx],rax
    3b6a:	90                   	nop
    3b6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3b6f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    3b78:	74 05                	je     3b7f <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1l>, void>(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x57>
    3b7a:	e8 21 e6 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3b7f:	c9                   	leave
    3b80:	c3                   	ret

0000000000003b81 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    3b81:	55                   	push   rbp
    3b82:	48 89 e5             	mov    rbp,rsp
    3b85:	48 83 ec 30          	sub    rsp,0x30
    3b89:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    3b8d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3b96:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    3b9a:	31 c0                	xor    eax,eax
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    3b9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3ba0:	48 89 c7             	mov    rdi,rax
    3ba3:	e8 6e ff ff ff       	call   3b16 <std::chrono::duration<long, std::ratio<1l, 1000l> >::count() const>
    3ba8:	48 69 c0 40 42 0f 00 	imul   rax,rax,0xf4240
	    return _ToDur(static_cast<__to_rep>(
    3baf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3bb3:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
    3bb7:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    3bbb:	48 89 d6             	mov    rsi,rdx
    3bbe:	48 89 c7             	mov    rdi,rax
    3bc1:	e8 58 ed ff ff       	call   291e <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    3bc6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
	  }
    3bca:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    3bce:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3bd7:	74 05                	je     3bde <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1000l> >(std::chrono::duration<long, std::ratio<1l, 1000l> > const&)+0x5d>
    3bd9:	e8 c2 e5 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3bde:	c9                   	leave
    3bdf:	c3                   	ret

0000000000003be0 <std::__new_allocator<Enemy>::__new_allocator()>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3be0:	55                   	push   rbp
    3be1:	48 89 e5             	mov    rbp,rsp
    3be4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3be8:	90                   	nop
    3be9:	5d                   	pop    rbp
    3bea:	c3                   	ret

0000000000003beb <std::allocator_traits<std::allocator<Enemy> >::deallocate(std::allocator<Enemy>&, Enemy*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    3beb:	55                   	push   rbp
    3bec:	48 89 e5             	mov    rbp,rsp
    3bef:	48 83 ec 20          	sub    rsp,0x20
    3bf3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3bf7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    3bfb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      { __a.deallocate(__p, __n); }
    3bff:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3c03:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    3c07:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3c0b:	48 89 ce             	mov    rsi,rcx
    3c0e:	48 89 c7             	mov    rdi,rax
    3c11:	e8 e0 03 00 00       	call   3ff6 <std::__new_allocator<Enemy>::deallocate(Enemy*, unsigned long)>
    3c16:	90                   	nop
    3c17:	c9                   	leave
    3c18:	c3                   	ret

0000000000003c19 <void std::_Destroy<Enemy*>(Enemy*, Enemy*)>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    3c19:	55                   	push   rbp
    3c1a:	48 89 e5             	mov    rbp,rsp
    3c1d:	48 83 ec 10          	sub    rsp,0x10
    3c21:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3c25:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
    3c29:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    3c2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3c31:	48 89 d6             	mov    rsi,rdx
    3c34:	48 89 c7             	mov    rdi,rax
    3c37:	e8 eb 03 00 00       	call   4027 <void std::_Destroy_aux<true>::__destroy<Enemy*>(Enemy*, Enemy*)>
    }
    3c3c:	90                   	nop
    3c3d:	c9                   	leave
    3c3e:	c3                   	ret

0000000000003c3f <unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long)>:
      __mod(_Tp __x)
    3c3f:	55                   	push   rbp
    3c40:	48 89 e5             	mov    rbp,rsp
    3c43:	48 83 ec 20          	sub    rsp,0x20
    3c47:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
	    constexpr _Tp __a1 = __a ? __a : 1;
    3c4b:	48 c7 45 f8 01 00 00 00 	mov    QWORD PTR [rbp-0x8],0x1
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
    3c53:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3c57:	48 89 c7             	mov    rdi,rax
    3c5a:	e8 d7 03 00 00       	call   4036 <std::__detail::_Mod<unsigned long, 4294967296ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
      }
    3c5f:	c9                   	leave
    3c60:	c3                   	ret

0000000000003c61 <unsigned long std::__detail::__mod<unsigned long, 624ul, 1ul, 0ul>(unsigned long)>:
      __mod(_Tp __x)
    3c61:	55                   	push   rbp
    3c62:	48 89 e5             	mov    rbp,rsp
    3c65:	48 83 ec 20          	sub    rsp,0x20
    3c69:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
	    constexpr _Tp __a1 = __a ? __a : 1;
    3c6d:	48 c7 45 f8 01 00 00 00 	mov    QWORD PTR [rbp-0x8],0x1
	    return _Mod<_Tp, __m, __a1, __c>::__calc(__x);
    3c75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3c79:	48 89 c7             	mov    rdi,rax
    3c7c:	e8 d4 03 00 00       	call   4055 <std::__detail::_Mod<unsigned long, 624ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
      }
    3c81:	c9                   	leave
    3c82:	c3                   	ret
    3c83:	90                   	nop

0000000000003c84 <std::uniform_int_distribution<int>::param_type::b() const>:
	b() const
    3c84:	55                   	push   rbp
    3c85:	48 89 e5             	mov    rbp,rsp
    3c88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	{ return _M_b; }
    3c8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3c90:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    3c93:	5d                   	pop    rbp
    3c94:	c3                   	ret
    3c95:	90                   	nop

0000000000003c96 <std::uniform_int_distribution<int>::param_type::a() const>:
	a() const
    3c96:	55                   	push   rbp
    3c97:	48 89 e5             	mov    rbp,rsp
    3c9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	{ return _M_a; }
    3c9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3ca2:	8b 00                	mov    eax,DWORD PTR [rax]
    3ca4:	5d                   	pop    rbp
    3ca5:	c3                   	ret

0000000000003ca6 <unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)>:
	_S_nd(_Urbg& __g, _Up __range)
    3ca6:	55                   	push   rbp
    3ca7:	48 89 e5             	mov    rbp,rsp
    3caa:	48 83 ec 20          	sub    rsp,0x20
    3cae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3cb2:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
	  _Wp __product = _Wp(__g()) * _Wp(__range);
    3cb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3cb9:	48 89 c7             	mov    rdi,rax
    3cbc:	e8 5d 00 00 00       	call   3d1e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
    3cc1:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    3cc4:	48 0f af c2          	imul   rax,rdx
    3cc8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	  _Up __low = _Up(__product);
    3ccc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3cd0:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
	  if (__low < __range)
    3cd3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    3cd6:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
    3cd9:	73 38                	jae    3d13 <unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)+0x6d>
	      _Up __threshold = -__range % __range;
    3cdb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    3cde:	f7 d8                	neg    eax
    3ce0:	ba 00 00 00 00       	mov    edx,0x0
    3ce5:	f7 75 e4             	div    DWORD PTR [rbp-0x1c]
    3ce8:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
	      while (__low < __threshold)
    3ceb:	eb 1e                	jmp    3d0b <unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)+0x65>
		  __product = _Wp(__g()) * _Wp(__range);
    3ced:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3cf1:	48 89 c7             	mov    rdi,rax
    3cf4:	e8 25 00 00 00       	call   3d1e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
    3cf9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    3cfc:	48 0f af c2          	imul   rax,rdx
    3d00:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
		  __low = _Up(__product);
    3d04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3d08:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
	      while (__low < __threshold)
    3d0b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    3d0e:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    3d11:	72 da                	jb     3ced <unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)+0x47>
	  return __product >> _Up_traits::__digits;
    3d13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3d17:	48 c1 e8 20          	shr    rax,0x20
	}
    3d1b:	c9                   	leave
    3d1c:	c3                   	ret
    3d1d:	90                   	nop

0000000000003d1e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
    3d1e:	55                   	push   rbp
    3d1f:	48 89 e5             	mov    rbp,rsp
    3d22:	48 83 ec 20          	sub    rsp,0x20
    3d26:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
			    __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      // Reload the vector - cost is O(n) amortized over n calls.
      if (_M_p >= state_size)
    3d2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3d2e:	48 8b 80 80 13 00 00 	mov    rax,QWORD PTR [rax+0x1380]
    3d35:	48 3d 6f 02 00 00    	cmp    rax,0x26f
    3d3b:	76 0c                	jbe    3d49 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x2b>
	_M_gen_rand();
    3d3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3d41:	48 89 c7             	mov    rdi,rax
    3d44:	e8 51 03 00 00       	call   409a <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>

      // Calculate o(x(i)).
      result_type __z = _M_x[_M_p++];
    3d49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3d4d:	48 8b 80 80 13 00 00 	mov    rax,QWORD PTR [rax+0x1380]
    3d54:	48 8d 48 01          	lea    rcx,[rax+0x1]
    3d58:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3d5c:	48 89 8a 80 13 00 00 	mov    QWORD PTR [rdx+0x1380],rcx
    3d63:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3d67:	48 8b 04 c2          	mov    rax,QWORD PTR [rdx+rax*8]
    3d6b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
      __z ^= (__z >> __u) & __d;
    3d6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3d73:	48 c1 e8 0b          	shr    rax,0xb
    3d77:	89 c0                	mov    eax,eax
    3d79:	48 31 45 f8          	xor    QWORD PTR [rbp-0x8],rax
      __z ^= (__z << __s) & __b;
    3d7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3d81:	48 c1 e0 07          	shl    rax,0x7
    3d85:	25 80 56 2c 9d       	and    eax,0x9d2c5680
    3d8a:	48 31 45 f8          	xor    QWORD PTR [rbp-0x8],rax
      __z ^= (__z << __t) & __c;
    3d8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3d92:	48 c1 e0 0f          	shl    rax,0xf
    3d96:	25 00 00 c6 ef       	and    eax,0xefc60000
    3d9b:	48 31 45 f8          	xor    QWORD PTR [rbp-0x8],rax
      __z ^= (__z >> __l);
    3d9f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3da3:	48 c1 e8 12          	shr    rax,0x12
    3da7:	48 31 45 f8          	xor    QWORD PTR [rbp-0x8],rax

      return __z;
    3dab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    }
    3daf:	c9                   	leave
    3db0:	c3                   	ret

0000000000003db1 <Enemy const& std::forward<Enemy const&>(std::remove_reference<Enemy const&>::type&)>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    3db1:	55                   	push   rbp
    3db2:	48 89 e5             	mov    rbp,rsp
    3db5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<_Tp&&>(__t); }
    3db9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3dbd:	5d                   	pop    rbp
    3dbe:	c3                   	ret
    3dbf:	90                   	nop

0000000000003dc0 <void std::__new_allocator<Enemy>::construct<Enemy, Enemy const&>(Enemy*, Enemy const&)>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
    3dc0:	55                   	push   rbp
    3dc1:	48 89 e5             	mov    rbp,rsp
    3dc4:	53                   	push   rbx
    3dc5:	48 83 ec 28          	sub    rsp,0x28
    3dc9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3dcd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    3dd1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    3dd5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    3dd9:	48 89 c6             	mov    rsi,rax
    3ddc:	bf 08 00 00 00       	mov    edi,0x8
    3de1:	e8 f3 ea ff ff       	call   28d9 <operator new(unsigned long, void*)>
    3de6:	48 89 c3             	mov    rbx,rax
    3de9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    3ded:	48 89 c7             	mov    rdi,rax
    3df0:	e8 bc ff ff ff       	call   3db1 <Enemy const& std::forward<Enemy const&>(std::remove_reference<Enemy const&>::type&)>
    3df5:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3df8:	48 89 03             	mov    QWORD PTR [rbx],rax
    3dfb:	90                   	nop
    3dfc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3e00:	c9                   	leave
    3e01:	c3                   	ret

0000000000003e02 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
    3e02:	55                   	push   rbp
    3e03:	48 89 e5             	mov    rbp,rsp
    3e06:	53                   	push   rbx
    3e07:	48 83 ec 48          	sub    rsp,0x48
    3e0b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    3e0f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    3e13:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    3e17:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3e20:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    3e24:	31 c0                	xor    eax,eax
      {
	if (max_size() - size() < __n)
    3e26:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3e2a:	48 89 c7             	mov    rdi,rax
    3e2d:	e8 1e 04 00 00       	call   4250 <std::vector<Enemy, std::allocator<Enemy> >::max_size() const>
    3e32:	48 89 c3             	mov    rbx,rax
    3e35:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3e39:	48 89 c7             	mov    rdi,rax
    3e3c:	e8 31 04 00 00       	call   4272 <std::vector<Enemy, std::allocator<Enemy> >::size() const>
    3e41:	48 29 c3             	sub    rbx,rax
    3e44:	48 89 da             	mov    rdx,rbx
    3e47:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    3e4b:	48 39 c2             	cmp    rdx,rax
    3e4e:	0f 92 c0             	setb   al
    3e51:	84 c0                	test   al,al
    3e53:	74 0c                	je     3e61 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const+0x5f>
	  __throw_length_error(__N(__s));
    3e55:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    3e59:	48 89 c7             	mov    rdi,rax
    3e5c:	e8 1f e2 ff ff       	call   2080 <std::__throw_length_error(char const*)@plt>

	const size_type __len = size() + (std::max)(size(), __n);
    3e61:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3e65:	48 89 c7             	mov    rdi,rax
    3e68:	e8 05 04 00 00       	call   4272 <std::vector<Enemy, std::allocator<Enemy> >::size() const>
    3e6d:	48 89 c3             	mov    rbx,rax
    3e70:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3e74:	48 89 c7             	mov    rdi,rax
    3e77:	e8 f6 03 00 00       	call   4272 <std::vector<Enemy, std::allocator<Enemy> >::size() const>
    3e7c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    3e80:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
    3e84:	48 8d 45 d8          	lea    rax,[rbp-0x28]
    3e88:	48 89 d6             	mov    rsi,rdx
    3e8b:	48 89 c7             	mov    rdi,rax
    3e8e:	e8 02 04 00 00       	call   4295 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
    3e93:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3e96:	48 01 d8             	add    rax,rbx
    3e99:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    3e9d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3ea1:	48 89 c7             	mov    rdi,rax
    3ea4:	e8 c9 03 00 00       	call   4272 <std::vector<Enemy, std::allocator<Enemy> >::size() const>
    3ea9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
    3ead:	72 12                	jb     3ec1 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const+0xbf>
    3eaf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3eb3:	48 89 c7             	mov    rdi,rax
    3eb6:	e8 95 03 00 00       	call   4250 <std::vector<Enemy, std::allocator<Enemy> >::max_size() const>
    3ebb:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
    3ebf:	73 0e                	jae    3ecf <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const+0xcd>
    3ec1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    3ec5:	48 89 c7             	mov    rdi,rax
    3ec8:	e8 83 03 00 00       	call   4250 <std::vector<Enemy, std::allocator<Enemy> >::max_size() const>
    3ecd:	eb 04                	jmp    3ed3 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const+0xd1>
    3ecf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
      }
    3ed3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3ed7:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    3ee0:	74 05                	je     3ee7 <std::vector<Enemy, std::allocator<Enemy> >::_M_check_len(unsigned long, char const*) const+0xe5>
    3ee2:	e8 b9 e2 ff ff       	call   21a0 <__stack_chk_fail@plt>
    3ee7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3eeb:	c9                   	leave
    3eec:	c3                   	ret

0000000000003eed <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::difference_type __gnu_cxx::operator-<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >(__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&, __gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > > const&)>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
    3eed:	55                   	push   rbp
    3eee:	48 89 e5             	mov    rbp,rsp
    3ef1:	53                   	push   rbx
    3ef2:	48 83 ec 18          	sub    rsp,0x18
    3ef6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    3efa:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    3efe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    3f02:	48 89 c7             	mov    rdi,rax
    3f05:	e8 06 f7 ff ff       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    3f0a:	48 8b 18             	mov    rbx,QWORD PTR [rax]
    3f0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    3f11:	48 89 c7             	mov    rdi,rax
    3f14:	e8 f7 f6 ff ff       	call   3610 <__gnu_cxx::__normal_iterator<Enemy*, std::vector<Enemy, std::allocator<Enemy> > >::base() const>
    3f19:	48 8b 00             	mov    rax,QWORD PTR [rax]
    3f1c:	48 89 da             	mov    rdx,rbx
    3f1f:	48 29 c2             	sub    rdx,rax
    3f22:	48 89 d0             	mov    rax,rdx
    3f25:	48 c1 f8 03          	sar    rax,0x3
    3f29:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    3f2d:	c9                   	leave
    3f2e:	c3                   	ret
    3f2f:	90                   	nop

0000000000003f30 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_allocate(unsigned long)>:
      _M_allocate(size_t __n)
    3f30:	55                   	push   rbp
    3f31:	48 89 e5             	mov    rbp,rsp
    3f34:	48 83 ec 10          	sub    rsp,0x10
    3f38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3f3c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    3f40:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    3f45:	74 15                	je     3f5c <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_allocate(unsigned long)+0x2c>
    3f47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3f4b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    3f4f:	48 89 d6             	mov    rsi,rdx
    3f52:	48 89 c7             	mov    rdi,rax
    3f55:	e8 66 03 00 00       	call   42c0 <std::allocator_traits<std::allocator<Enemy> >::allocate(std::allocator<Enemy>&, unsigned long)>
    3f5a:	eb 05                	jmp    3f61 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_allocate(unsigned long)+0x31>
    3f5c:	b8 00 00 00 00       	mov    eax,0x0
      }
    3f61:	c9                   	leave
    3f62:	c3                   	ret

0000000000003f63 <std::vector<Enemy, std::allocator<Enemy> >::_S_relocate(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
    3f63:	55                   	push   rbp
    3f64:	48 89 e5             	mov    rbp,rsp
    3f67:	48 83 ec 20          	sub    rsp,0x20
    3f6b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3f6f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    3f73:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    3f77:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
	return std::__relocate_a(__first, __last, __result, __alloc);
    3f7b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    3f7f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    3f83:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
    3f87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3f8b:	48 89 c7             	mov    rdi,rax
    3f8e:	e8 57 03 00 00       	call   42ea <Enemy* std::__relocate_a<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>
      }
    3f93:	c9                   	leave
    3f94:	c3                   	ret

0000000000003f95 <void std::allocator_traits<std::allocator<Enemy> >::destroy<Enemy>(std::allocator<Enemy>&, Enemy*)>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
    3f95:	55                   	push   rbp
    3f96:	48 89 e5             	mov    rbp,rsp
    3f99:	48 83 ec 10          	sub    rsp,0x10
    3f9d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3fa1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  __a.destroy(__p);
    3fa5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    3fa9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3fad:	48 89 d6             	mov    rsi,rdx
    3fb0:	48 89 c7             	mov    rdi,rax
    3fb3:	e8 96 03 00 00       	call   434e <void std::__new_allocator<Enemy>::destroy<Enemy>(Enemy*)>
	}
    3fb8:	90                   	nop
    3fb9:	c9                   	leave
    3fba:	c3                   	ret

0000000000003fbb <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    3fbb:	55                   	push   rbp
    3fbc:	48 89 e5             	mov    rbp,rsp
    3fbf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return typename iterator_traits<_Iter>::iterator_category(); }
    3fc3:	90                   	nop
    3fc4:	5d                   	pop    rbp
    3fc5:	c3                   	ret

0000000000003fc6 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    3fc6:	55                   	push   rbp
    3fc7:	48 89 e5             	mov    rbp,rsp
    3fca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    3fce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      return __last - __first;
    3fd2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    3fd6:	48 2b 45 f8          	sub    rax,QWORD PTR [rbp-0x8]
    }
    3fda:	5d                   	pop    rbp
    3fdb:	c3                   	ret

0000000000003fdc <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    3fdc:	55                   	push   rbp
    3fdd:	48 89 e5             	mov    rbp,rsp
    3fe0:	48 83 ec 10          	sub    rsp,0x10
    3fe4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	return __dc::__cast(__d);
    3fe8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    3fec:	48 89 c7             	mov    rdi,rax
    3fef:	e8 69 03 00 00       	call   435d <std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>
      }
    3ff4:	c9                   	leave
    3ff5:	c3                   	ret

0000000000003ff6 <std::__new_allocator<Enemy>::deallocate(Enemy*, unsigned long)>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    3ff6:	55                   	push   rbp
    3ff7:	48 89 e5             	mov    rbp,rsp
    3ffa:	48 83 ec 20          	sub    rsp,0x20
    3ffe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4002:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4006:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    400a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    400e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    4016:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    401a:	48 89 d6             	mov    rsi,rdx
    401d:	48 89 c7             	mov    rdi,rax
    4020:	e8 2b e1 ff ff       	call   2150 <operator delete(void*, unsigned long)@plt>
      }
    4025:	c9                   	leave
    4026:	c3                   	ret

0000000000004027 <void std::_Destroy_aux<true>::__destroy<Enemy*>(Enemy*, Enemy*)>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    4027:	55                   	push   rbp
    4028:	48 89 e5             	mov    rbp,rsp
    402b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    402f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4033:	90                   	nop
    4034:	5d                   	pop    rbp
    4035:	c3                   	ret

0000000000004036 <std::__detail::_Mod<unsigned long, 4294967296ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
	__calc(_Tp __x)
    4036:	55                   	push   rbp
    4037:	48 89 e5             	mov    rbp,rsp
    403a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
	  _Tp __res = __a * __x + __c;
    403e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4042:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	    __res %= __m;
    4046:	b8 ff ff ff ff       	mov    eax,0xffffffff
    404b:	48 21 45 f8          	and    QWORD PTR [rbp-0x8],rax
	  return __res;
    404f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
	}
    4053:	5d                   	pop    rbp
    4054:	c3                   	ret

0000000000004055 <std::__detail::_Mod<unsigned long, 624ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
	__calc(_Tp __x)
    4055:	55                   	push   rbp
    4056:	48 89 e5             	mov    rbp,rsp
    4059:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
	  _Tp __res = __a * __x + __c;
    405d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4061:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	    __res %= __m;
    4065:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    4069:	48 89 c8             	mov    rax,rcx
    406c:	48 c1 e8 04          	shr    rax,0x4
    4070:	48 ba 21 0d d2 20 0d d2 20 0d 	movabs rdx,0xd20d20d20d20d21
    407a:	48 f7 e2             	mul    rdx
    407d:	48 89 d0             	mov    rax,rdx
    4080:	48 d1 e8             	shr    rax,1
    4083:	48 69 c0 70 02 00 00 	imul   rax,rax,0x270
    408a:	48 29 c1             	sub    rcx,rax
    408d:	48 89 ca             	mov    rdx,rcx
    4090:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
	  return __res;
    4094:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
	}
    4098:	5d                   	pop    rbp
    4099:	c3                   	ret

000000000000409a <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
    409a:	55                   	push   rbp
    409b:	48 89 e5             	mov    rbp,rsp
    409e:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
      const _UIntType __upper_mask = (~_UIntType()) << __r;
    40a2:	48 c7 45 d8 00 00 00 80 	mov    QWORD PTR [rbp-0x28],0xffffffff80000000
      const _UIntType __lower_mask = ~__upper_mask;
    40aa:	48 c7 45 e0 ff ff ff 7f 	mov    QWORD PTR [rbp-0x20],0x7fffffff
      for (size_t __k = 0; __k < (__n - __m); ++__k)
    40b2:	48 c7 45 c8 00 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
    40ba:	eb 7d                	jmp    4139 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x9f>
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
    40bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    40c0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    40c4:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    40c8:	48 25 00 00 00 80    	and    rax,0xffffffff80000000
    40ce:	48 89 c1             	mov    rcx,rax
			   | (_M_x[__k + 1] & __lower_mask));
    40d1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    40d5:	48 8d 50 01          	lea    rdx,[rax+0x1]
    40d9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    40dd:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    40e1:	25 ff ff ff 7f       	and    eax,0x7fffffff
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
    40e6:	48 09 c8             	or     rax,rcx
    40e9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
    40ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    40f1:	48 8d 90 8d 01 00 00 	lea    rdx,[rax+0x18d]
    40f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    40fc:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    4100:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    4104:	48 d1 ea             	shr    rdx,1
    4107:	48 31 c2             	xor    rdx,rax
		       ^ ((__y & 0x01) ? __a : 0));
    410a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    410e:	83 e0 01             	and    eax,0x1
    4111:	48 85 c0             	test   rax,rax
    4114:	74 07                	je     411d <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x83>
    4116:	b8 df b0 08 99       	mov    eax,0x9908b0df
    411b:	eb 05                	jmp    4122 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x88>
    411d:	b8 00 00 00 00       	mov    eax,0x0
    4122:	48 31 d0             	xor    rax,rdx
    4125:	48 89 c1             	mov    rcx,rax
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
    4128:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    412c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    4130:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
      for (size_t __k = 0; __k < (__n - __m); ++__k)
    4134:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
    4139:	48 81 7d c8 e2 00 00 00 	cmp    QWORD PTR [rbp-0x38],0xe2
    4141:	0f 86 75 ff ff ff    	jbe    40bc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x22>
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
    4147:	48 c7 45 d0 e3 00 00 00 	mov    QWORD PTR [rbp-0x30],0xe3
    414f:	eb 7d                	jmp    41ce <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x134>
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
    4151:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4155:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    4159:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    415d:	48 25 00 00 00 80    	and    rax,0xffffffff80000000
    4163:	48 89 c1             	mov    rcx,rax
			   | (_M_x[__k + 1] & __lower_mask));
    4166:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    416a:	48 8d 50 01          	lea    rdx,[rax+0x1]
    416e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4172:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    4176:	25 ff ff ff 7f       	and    eax,0x7fffffff
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
    417b:	48 09 c8             	or     rax,rcx
    417e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
    4182:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    4186:	48 8d 90 1d ff ff ff 	lea    rdx,[rax-0xe3]
    418d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4191:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
    4195:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    4199:	48 d1 ea             	shr    rdx,1
    419c:	48 31 c2             	xor    rdx,rax
		       ^ ((__y & 0x01) ? __a : 0));
    419f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    41a3:	83 e0 01             	and    eax,0x1
    41a6:	48 85 c0             	test   rax,rax
    41a9:	74 07                	je     41b2 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x118>
    41ab:	b8 df b0 08 99       	mov    eax,0x9908b0df
    41b0:	eb 05                	jmp    41b7 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x11d>
    41b2:	b8 00 00 00 00       	mov    eax,0x0
    41b7:	48 31 d0             	xor    rax,rdx
    41ba:	48 89 c1             	mov    rcx,rax
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
    41bd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    41c1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    41c5:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
    41c9:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
    41ce:	48 81 7d d0 6e 02 00 00 	cmp    QWORD PTR [rbp-0x30],0x26e
    41d6:	0f 86 75 ff ff ff    	jbe    4151 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xb7>
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
    41dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    41e0:	48 8b 80 78 13 00 00 	mov    rax,QWORD PTR [rax+0x1378]
    41e7:	48 25 00 00 00 80    	and    rax,0xffffffff80000000
    41ed:	48 89 c2             	mov    rdx,rax
		       | (_M_x[0] & __lower_mask));
    41f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    41f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    41f7:	25 ff ff ff 7f       	and    eax,0x7fffffff
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
    41fc:	48 09 d0             	or     rax,rdx
    41ff:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    4203:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4207:	48 8b 80 60 0c 00 00 	mov    rax,QWORD PTR [rax+0xc60]
    420e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    4212:	48 d1 ea             	shr    rdx,1
    4215:	48 31 c2             	xor    rdx,rax
		       ^ ((__y & 0x01) ? __a : 0));
    4218:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    421c:	83 e0 01             	and    eax,0x1
    421f:	48 85 c0             	test   rax,rax
    4222:	74 07                	je     422b <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x191>
    4224:	b8 df b0 08 99       	mov    eax,0x9908b0df
    4229:	eb 05                	jmp    4230 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x196>
    422b:	b8 00 00 00 00       	mov    eax,0x0
    4230:	48 31 c2             	xor    rdx,rax
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    4233:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4237:	48 89 90 78 13 00 00 	mov    QWORD PTR [rax+0x1378],rdx
      _M_p = 0;
    423e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    4242:	48 c7 80 80 13 00 00 00 00 00 00 	mov    QWORD PTR [rax+0x1380],0x0
    }
    424d:	90                   	nop
    424e:	5d                   	pop    rbp
    424f:	c3                   	ret

0000000000004250 <std::vector<Enemy, std::allocator<Enemy> >::max_size() const>:
      max_size() const _GLIBCXX_NOEXCEPT
    4250:	55                   	push   rbp
    4251:	48 89 e5             	mov    rbp,rsp
    4254:	48 83 ec 10          	sub    rsp,0x10
    4258:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return _S_max_size(_M_get_Tp_allocator()); }
    425c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4260:	48 89 c7             	mov    rdi,rax
    4263:	e8 ba 01 00 00       	call   4422 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator() const>
    4268:	48 89 c7             	mov    rdi,rax
    426b:	e8 4c 01 00 00       	call   43bc <std::vector<Enemy, std::allocator<Enemy> >::_S_max_size(std::allocator<Enemy> const&)>
    4270:	c9                   	leave
    4271:	c3                   	ret

0000000000004272 <std::vector<Enemy, std::allocator<Enemy> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
    4272:	55                   	push   rbp
    4273:	48 89 e5             	mov    rbp,rsp
    4276:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    427a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    427e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    4282:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4286:	48 8b 00             	mov    rax,QWORD PTR [rax]
    4289:	48 29 c2             	sub    rdx,rax
    428c:	48 89 d0             	mov    rax,rdx
    428f:	48 c1 f8 03          	sar    rax,0x3
    4293:	5d                   	pop    rbp
    4294:	c3                   	ret

0000000000004295 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    4295:	55                   	push   rbp
    4296:	48 89 e5             	mov    rbp,rsp
    4299:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    429d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    42a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    42a5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    42a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    42ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
    42af:	48 39 c2             	cmp    rdx,rax
    42b2:	73 06                	jae    42ba <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
	return __b;
    42b4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    42b8:	eb 04                	jmp    42be <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
      return __a;
    42ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    }
    42be:	5d                   	pop    rbp
    42bf:	c3                   	ret

00000000000042c0 <std::allocator_traits<std::allocator<Enemy> >::allocate(std::allocator<Enemy>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
    42c0:	55                   	push   rbp
    42c1:	48 89 e5             	mov    rbp,rsp
    42c4:	48 83 ec 10          	sub    rsp,0x10
    42c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    42cc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      { return __a.allocate(__n); }
    42d0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    42d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    42d8:	ba 00 00 00 00       	mov    edx,0x0
    42dd:	48 89 ce             	mov    rsi,rcx
    42e0:	48 89 c7             	mov    rdi,rax
    42e3:	e8 48 01 00 00       	call   4430 <std::__new_allocator<Enemy>::allocate(unsigned long, void const*)>
    42e8:	c9                   	leave
    42e9:	c3                   	ret

00000000000042ea <Enemy* std::__relocate_a<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
    42ea:	55                   	push   rbp
    42eb:	48 89 e5             	mov    rbp,rsp
    42ee:	41 54                	push   r12
    42f0:	53                   	push   rbx
    42f1:	48 83 ec 20          	sub    rsp,0x20
    42f5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    42f9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    42fd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    4301:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
    4305:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    4309:	48 89 c7             	mov    rdi,rax
    430c:	e8 80 01 00 00       	call   4491 <Enemy* std::__niter_base<Enemy*>(Enemy*)>
    4311:	49 89 c4             	mov    r12,rax
    4314:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    4318:	48 89 c7             	mov    rdi,rax
    431b:	e8 71 01 00 00       	call   4491 <Enemy* std::__niter_base<Enemy*>(Enemy*)>
    4320:	48 89 c3             	mov    rbx,rax
    4323:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4327:	48 89 c7             	mov    rdi,rax
    432a:	e8 62 01 00 00       	call   4491 <Enemy* std::__niter_base<Enemy*>(Enemy*)>
    432f:	48 89 c7             	mov    rdi,rax
    4332:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    4336:	48 89 c1             	mov    rcx,rax
    4339:	4c 89 e2             	mov    rdx,r12
    433c:	48 89 de             	mov    rsi,rbx
    433f:	e8 5b 01 00 00       	call   449f <Enemy* std::__relocate_a_1<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
    4344:	48 83 c4 20          	add    rsp,0x20
    4348:	5b                   	pop    rbx
    4349:	41 5c                	pop    r12
    434b:	5d                   	pop    rbp
    434c:	c3                   	ret
    434d:	90                   	nop

000000000000434e <void std::__new_allocator<Enemy>::destroy<Enemy>(Enemy*)>:

      template<typename _Up>
	void
	destroy(_Up* __p)
    434e:	55                   	push   rbp
    434f:	48 89 e5             	mov    rbp,rsp
    4352:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4356:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
    435a:	90                   	nop
    435b:	5d                   	pop    rbp
    435c:	c3                   	ret

000000000000435d <std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    435d:	55                   	push   rbp
    435e:	48 89 e5             	mov    rbp,rsp
    4361:	48 83 ec 30          	sub    rsp,0x30
    4365:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    4369:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    4372:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    4376:	31 c0                	xor    eax,eax
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    4378:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    437c:	48 89 c7             	mov    rdi,rax
    437f:	e8 20 e9 ff ff       	call   2ca4 <std::chrono::duration<long, std::ratio<1l, 1l> >::count() const>
    4384:	48 69 c0 e8 03 00 00 	imul   rax,rax,0x3e8
	    return _ToDur(static_cast<__to_rep>(
    438b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    438f:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
    4393:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    4397:	48 89 d6             	mov    rsi,rdx
    439a:	48 89 c7             	mov    rdi,rax
    439d:	e8 6a f6 ff ff       	call   3a0c <std::chrono::duration<long, std::ratio<1l, 1000l> >::duration<long, void>(long const&)>
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    43a2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
	  }
    43a6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    43aa:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    43b3:	74 05                	je     43ba <std::chrono::duration<long, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000l> >, std::ratio<1000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)+0x5d>
    43b5:	e8 e6 dd ff ff       	call   21a0 <__stack_chk_fail@plt>
    43ba:	c9                   	leave
    43bb:	c3                   	ret

00000000000043bc <std::vector<Enemy, std::allocator<Enemy> >::_S_max_size(std::allocator<Enemy> const&)>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    43bc:	55                   	push   rbp
    43bd:	48 89 e5             	mov    rbp,rsp
    43c0:	48 83 ec 30          	sub    rsp,0x30
    43c4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    43c8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    43d1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    43d5:	31 c0                	xor    eax,eax
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
    43d7:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
    43e1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    43e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    43e9:	48 89 c7             	mov    rdi,rax
    43ec:	e8 1f 01 00 00       	call   4510 <std::allocator_traits<std::allocator<Enemy> >::max_size(std::allocator<Enemy> const&)>
    43f1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
	return (std::min)(__diffmax, __allocmax);
    43f5:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
    43f9:	48 8d 45 e8          	lea    rax,[rbp-0x18]
    43fd:	48 89 d6             	mov    rsi,rdx
    4400:	48 89 c7             	mov    rdi,rax
    4403:	e8 22 01 00 00       	call   452a <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    4408:	48 8b 00             	mov    rax,QWORD PTR [rax]
      }
    440b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    440f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    4418:	74 05                	je     441f <std::vector<Enemy, std::allocator<Enemy> >::_S_max_size(std::allocator<Enemy> const&)+0x63>
    441a:	e8 81 dd ff ff       	call   21a0 <__stack_chk_fail@plt>
    441f:	c9                   	leave
    4420:	c3                   	ret
    4421:	90                   	nop

0000000000004422 <std::_Vector_base<Enemy, std::allocator<Enemy> >::_M_get_Tp_allocator() const>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    4422:	55                   	push   rbp
    4423:	48 89 e5             	mov    rbp,rsp
    4426:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return this->_M_impl; }
    442a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    442e:	5d                   	pop    rbp
    442f:	c3                   	ret

0000000000004430 <std::__new_allocator<Enemy>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    4430:	55                   	push   rbp
    4431:	48 89 e5             	mov    rbp,rsp
    4434:	48 83 ec 20          	sub    rsp,0x20
    4438:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    443c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4440:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__builtin_expect(__n > this->_M_max_size(), false))
    4444:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4448:	48 89 c7             	mov    rdi,rax
    444b:	e8 06 01 00 00       	call   4556 <std::__new_allocator<Enemy>::_M_max_size() const>
    4450:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
    4454:	0f 92 c0             	setb   al
    4457:	0f b6 c0             	movzx  eax,al
    445a:	48 85 c0             	test   rax,rax
    445d:	0f 95 c0             	setne  al
    4460:	84 c0                	test   al,al
    4462:	74 1a                	je     447e <std::__new_allocator<Enemy>::allocate(unsigned long, void const*)+0x4e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    4464:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
    446e:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
    4472:	73 05                	jae    4479 <std::__new_allocator<Enemy>::allocate(unsigned long, void const*)+0x49>
	      std::__throw_bad_array_new_length();
    4474:	e8 57 dc ff ff       	call   20d0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
    4479:	e8 e2 db ff ff       	call   2060 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    447e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    4482:	48 c1 e0 03          	shl    rax,0x3
    4486:	48 89 c7             	mov    rdi,rax
    4489:	e8 b2 dc ff ff       	call   2140 <operator new(unsigned long)@plt>
    448e:	90                   	nop
      }
    448f:	c9                   	leave
    4490:	c3                   	ret

0000000000004491 <Enemy* std::__niter_base<Enemy*>(Enemy*)>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
    4491:	55                   	push   rbp
    4492:	48 89 e5             	mov    rbp,rsp
    4495:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
    4499:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    449d:	5d                   	pop    rbp
    449e:	c3                   	ret

000000000000449f <Enemy* std::__relocate_a_1<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
    449f:	55                   	push   rbp
    44a0:	48 89 e5             	mov    rbp,rsp
    44a3:	53                   	push   rbx
    44a4:	48 83 ec 38          	sub    rsp,0x38
    44a8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    44ac:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    44b0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    44b4:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
      _ForwardIterator __cur = __result;
    44b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    44bc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
      for (; __first != __last; ++__first, (void)++__cur)
    44c0:	eb 3a                	jmp    44fc <Enemy* std::__relocate_a_1<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)+0x5d>
	std::__relocate_object_a(std::__addressof(*__cur),
    44c2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    44c6:	48 89 c7             	mov    rdi,rax
    44c9:	e8 9c 00 00 00       	call   456a <Enemy* std::__addressof<Enemy>(Enemy&)>
    44ce:	48 89 c3             	mov    rbx,rax
    44d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    44d5:	48 89 c7             	mov    rdi,rax
    44d8:	e8 8d 00 00 00       	call   456a <Enemy* std::__addressof<Enemy>(Enemy&)>
    44dd:	48 89 c1             	mov    rcx,rax
    44e0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    44e4:	48 89 c2             	mov    rdx,rax
    44e7:	48 89 de             	mov    rsi,rbx
    44ea:	48 89 cf             	mov    rdi,rcx
    44ed:	e8 86 00 00 00       	call   4578 <void std::__relocate_object_a<Enemy, Enemy, std::allocator<Enemy> >(Enemy*, Enemy*, std::allocator<Enemy>&)>
      for (; __first != __last; ++__first, (void)++__cur)
    44f2:	48 83 45 d8 08       	add    QWORD PTR [rbp-0x28],0x8
    44f7:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    44fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    4500:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
    4504:	75 bc                	jne    44c2 <Enemy* std::__relocate_a_1<Enemy*, Enemy*, std::allocator<Enemy> >(Enemy*, Enemy*, Enemy*, std::allocator<Enemy>&)+0x23>
      return __cur;
    4506:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    }
    450a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    450e:	c9                   	leave
    450f:	c3                   	ret

0000000000004510 <std::allocator_traits<std::allocator<Enemy> >::max_size(std::allocator<Enemy> const&)>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    4510:	55                   	push   rbp
    4511:	48 89 e5             	mov    rbp,rsp
    4514:	48 83 ec 10          	sub    rsp,0x10
    4518:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
	return __a.max_size();
    451c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4520:	48 89 c7             	mov    rdi,rax
    4523:	e8 a8 00 00 00       	call   45d0 <std::__new_allocator<Enemy>::max_size() const>
      }
    4528:	c9                   	leave
    4529:	c3                   	ret

000000000000452a <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
    min(const _Tp& __a, const _Tp& __b)
    452a:	55                   	push   rbp
    452b:	48 89 e5             	mov    rbp,rsp
    452e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4532:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      if (__b < __a)
    4536:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    453a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    453d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4541:	48 8b 00             	mov    rax,QWORD PTR [rax]
    4544:	48 39 c2             	cmp    rdx,rax
    4547:	73 06                	jae    454f <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
	return __b;
    4549:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    454d:	eb 04                	jmp    4553 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
      return __a;
    454f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    }
    4553:	5d                   	pop    rbp
    4554:	c3                   	ret
    4555:	90                   	nop

0000000000004556 <std::__new_allocator<Enemy>::_M_max_size() const>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    4556:	55                   	push   rbp
    4557:	48 89 e5             	mov    rbp,rsp
    455a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    455e:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    4568:	5d                   	pop    rbp
    4569:	c3                   	ret

000000000000456a <Enemy* std::__addressof<Enemy>(Enemy&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    456a:	55                   	push   rbp
    456b:	48 89 e5             	mov    rbp,rsp
    456e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return __builtin_addressof(__r); }
    4572:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4576:	5d                   	pop    rbp
    4577:	c3                   	ret

0000000000004578 <void std::__relocate_object_a<Enemy, Enemy, std::allocator<Enemy> >(Enemy*, Enemy*, std::allocator<Enemy>&)>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
    4578:	55                   	push   rbp
    4579:	48 89 e5             	mov    rbp,rsp
    457c:	48 83 ec 20          	sub    rsp,0x20
    4580:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4584:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4588:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      __traits::construct(__alloc, __dest, std::move(*__orig));
    458c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    4590:	48 89 c7             	mov    rdi,rax
    4593:	e8 52 00 00 00       	call   45ea <std::remove_reference<Enemy&>::type&& std::move<Enemy&>(Enemy&)>
    4598:	48 89 c2             	mov    rdx,rax
    459b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    459f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    45a3:	48 89 ce             	mov    rsi,rcx
    45a6:	48 89 c7             	mov    rdi,rax
    45a9:	e8 4a 00 00 00       	call   45f8 <void std::allocator_traits<std::allocator<Enemy> >::construct<Enemy, Enemy>(std::allocator<Enemy>&, Enemy*, Enemy&&)>
      __traits::destroy(__alloc, std::__addressof(*__orig));
    45ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    45b2:	48 89 c7             	mov    rdi,rax
    45b5:	e8 b0 ff ff ff       	call   456a <Enemy* std::__addressof<Enemy>(Enemy&)>
    45ba:	48 89 c2             	mov    rdx,rax
    45bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    45c1:	48 89 d6             	mov    rsi,rdx
    45c4:	48 89 c7             	mov    rdi,rax
    45c7:	e8 c9 f9 ff ff       	call   3f95 <void std::allocator_traits<std::allocator<Enemy> >::destroy<Enemy>(std::allocator<Enemy>&, Enemy*)>
    }
    45cc:	90                   	nop
    45cd:	c9                   	leave
    45ce:	c3                   	ret
    45cf:	90                   	nop

00000000000045d0 <std::__new_allocator<Enemy>::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    45d0:	55                   	push   rbp
    45d1:	48 89 e5             	mov    rbp,rsp
    45d4:	48 83 ec 10          	sub    rsp,0x10
    45d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return _M_max_size(); }
    45dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    45e0:	48 89 c7             	mov    rdi,rax
    45e3:	e8 6e ff ff ff       	call   4556 <std::__new_allocator<Enemy>::_M_max_size() const>
    45e8:	c9                   	leave
    45e9:	c3                   	ret

00000000000045ea <std::remove_reference<Enemy&>::type&& std::move<Enemy&>(Enemy&)>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    45ea:	55                   	push   rbp
    45eb:	48 89 e5             	mov    rbp,rsp
    45ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    45f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    45f6:	5d                   	pop    rbp
    45f7:	c3                   	ret

00000000000045f8 <void std::allocator_traits<std::allocator<Enemy> >::construct<Enemy, Enemy>(std::allocator<Enemy>&, Enemy*, Enemy&&)>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    45f8:	55                   	push   rbp
    45f9:	48 89 e5             	mov    rbp,rsp
    45fc:	48 83 ec 20          	sub    rsp,0x20
    4600:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4604:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4608:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	  __a.construct(__p, std::forward<_Args>(__args)...);
    460c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4610:	48 89 c7             	mov    rdi,rax
    4613:	e8 19 00 00 00       	call   4631 <Enemy&& std::forward<Enemy>(std::remove_reference<Enemy>::type&)>
    4618:	48 89 c2             	mov    rdx,rax
    461b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    461f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4623:	48 89 ce             	mov    rsi,rcx
    4626:	48 89 c7             	mov    rdi,rax
    4629:	e8 12 00 00 00       	call   4640 <void std::__new_allocator<Enemy>::construct<Enemy, Enemy>(Enemy*, Enemy&&)>
	}
    462e:	90                   	nop
    462f:	c9                   	leave
    4630:	c3                   	ret

0000000000004631 <Enemy&& std::forward<Enemy>(std::remove_reference<Enemy>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    4631:	55                   	push   rbp
    4632:	48 89 e5             	mov    rbp,rsp
    4635:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return static_cast<_Tp&&>(__t); }
    4639:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    463d:	5d                   	pop    rbp
    463e:	c3                   	ret
    463f:	90                   	nop

0000000000004640 <void std::__new_allocator<Enemy>::construct<Enemy, Enemy>(Enemy*, Enemy&&)>:
	construct(_Up* __p, _Args&&... __args)
    4640:	55                   	push   rbp
    4641:	48 89 e5             	mov    rbp,rsp
    4644:	53                   	push   rbx
    4645:	48 83 ec 28          	sub    rsp,0x28
    4649:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    464d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    4651:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    4655:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    4659:	48 89 c6             	mov    rsi,rax
    465c:	bf 08 00 00 00       	mov    edi,0x8
    4661:	e8 73 e2 ff ff       	call   28d9 <operator new(unsigned long, void*)>
    4666:	48 89 c3             	mov    rbx,rax
    4669:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    466d:	48 89 c7             	mov    rdi,rax
    4670:	e8 bc ff ff ff       	call   4631 <Enemy&& std::forward<Enemy>(std::remove_reference<Enemy>::type&)>
    4675:	48 8b 00             	mov    rax,QWORD PTR [rax]
    4678:	48 89 03             	mov    QWORD PTR [rbx],rax
    467b:	90                   	nop
    467c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    4680:	c9                   	leave
    4681:	c3                   	ret

Disassembly of section .fini:

0000000000004684 <_fini>:
    4684:	f3 0f 1e fa          	endbr64
    4688:	48 83 ec 08          	sub    rsp,0x8
    468c:	48 83 c4 08          	add    rsp,0x8
    4690:	c3                   	ret
